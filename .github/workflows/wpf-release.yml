name: WPF Release

on:
  workflow_dispatch:

jobs:
  wpf-release:
    runs-on: windows-latest

    steps:
      - name: Git - Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Version
        id: version
        run: |
          # Get the current date
          DATE=$(date +'%Y.%m.%d')
          
          # Get the current time (hour-minutes-seconds)
          TIME=$(date +'%k%M%S' | sed 's/^ //') # Removes leading space for single-digit hours
          
          # Get existing tags for the current date
          TAGS=$(git tag --list "${DATE}.*")
          
          # Calculate the next incremental number
          if [ -z "$TAGS" ]; then
          NUMBER=1
          else
          NUMBER=$(echo "$TAGS" | sed -E "s/${DATE}.//" | sort -n | tail -n1)
          NUMBER=$((NUMBER + 1))  # Increment without padding
          fi
          
          # Construct the version
          # VERSION="${DATE}.${NUMBER}"
          VERSION="${DATE}.${TIME}"
          echo "Generated version: $VERSION"
          
          # Export version as an output
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Version - Update project files
        uses: vers-one/dotnet-project-version-updater@v1.7
        with:
          file: "src/**/*.csproj"
          version: ${{ steps.version.outputs.version }}

      - name: Environment - Build Number
        uses: myci-actions/export-env-var@1
        with:
          name: BUILD_NUMBER
          value: ${{ steps.version.outputs.version }}

      - name: Environment - Github Token
        uses: myci-actions/export-env-var@1
        with:
          name: GITHUB_TOKEN
          value: ${{ github.token }}

      - name: Release Notes
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          name: 'Release v${{ steps.version.outputs.version }}'
          tag: 'v${{ steps.version.outputs.version }}'
          version: 'v${{ steps.version.outputs.version }}'
          publish: false
          prerelease: false

      - name: .NET - Setup
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x

      - name: .NET - Restore
        run: dotnet restore

      - name: .NET - Build
        run: dotnet build --no-restore

      - name: .NET - Tests
        run: dotnet test --no-build --verbosity normal

      - name: Build - Sidekick.Protocol
        run: dotnet publish src/Sidekick.Protocol/Sidekick.Protocol.csproj -p:PublishProfile=Build

      - name: Build - Sidekick.Wpf
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          Write-Output "Version: $version"

          # Find MSBuild.
          $msBuildPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" `
              -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe `
              -prerelease | select-object -first 1

          Push-Location "src/Sidekick.Wpf"
          & $msBuildPath Sidekick.Wpf.csproj /target:Publish /property:PublishProfile=ClickOnceRelease /property:ApplicationVersion=$version
          Pop-Location

      - name: Git - Setup
        run: |
          git config --global url."https://user:${{ secrets.GITHUB_TOKEN }}@github".insteadOf https://github
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com

      - name: Git - Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_RELEASE_KEY }}

      - name: Git - Push to repository
        shell: pwsh
        run: |
          $deployRepository = "git@github.com:Sidekick-Poe/Sidekick-Release.git"
          Write-Output "Deploy repository: $deployRepository"

          # Clone `gh-pages` branch.
          git clone $deployRepository -b gh-pages --single-branch "dist"

          Push-Location "dist"
          try {
              Write-Output "Removing previous files..."
              if (Test-Path "Application Files") {
                  Remove-Item -Path "Application Files" -Recurse
              }
              if (Test-Path "Sidekick.application") {
                  Remove-Item -Path "Sidekick.application"
              }

              Write-Output "Copying new files..."
              Copy-Item -Path "../src/Sidekick.Wpf/bin/publish/Application Files","../src/Sidekick.Wpf/bin/publish/Sidekick.application" -Destination . -Recurse

              # Stage and commit.
              git add -A
              git commit -m "Update to v$version"
              git push
          } finally {
              Pop-Location
          }
