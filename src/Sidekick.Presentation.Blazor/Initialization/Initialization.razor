@page "/initialization"
@layout EmptyLayout
@implements IDisposable
@using Sidekick.Domain.App.Commands
@using System.ComponentModel

<SidekickLogo />
<MudCard Class="my-4">
    <MudCardContent>
        <MudText Typo="Typo.body1"
                 Align="Align.Center">
            @ViewModel.Title
        </MudText>
        <MudProgressLinear Color="Color.Primary"
                           Value="ViewModel.Percentage"
                           Minimum="0"
                           Maximum="100" />
    </MudCardContent>
</MudCard>
<div class="d-flex justify-end">
    <MudButton OnClick="Exit"
               Variant="Variant.Text"
               Color="Color.Default">
        @Resources.Exit
    </MudButton>
</div>

@code {
    [Inject] private InitializationResources Resources { get; set; }
    [Inject] private IMediator Mediator { get; set; }
    [Inject] private InitializationViewModel ViewModel { get; set; }

    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += OnProgress;
        base.OnInitialized();
    }

    public void OnProgress(object sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public async Task Exit()
    {
        await Mediator.Send(new ShutdownCommand());
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnProgress;
    }
}
