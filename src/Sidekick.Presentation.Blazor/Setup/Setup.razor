@page "/setup"
@layout EmptyLayout

@using Blazored.FluentValidation
@using FluentValidation
@using Sidekick.Domain.App.Commands
@using Sidekick.Domain.Initialization.Commands
@using Sidekick.Domain.Settings.Commands
@using Sidekick.Presentation.Blazor.Settings
@using Sidekick.Presentation.Blazor.Settings.Components

<SidekickLogo />
<EditForm Model="@ViewModel" OnValidSubmit="Save">
    <FluentValidationValidator DisableAssemblyScanning="@true" />

    <MudCard Class="my-3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@SettingsResources.Language_Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <UILanguageSelect @bind-Value="ViewModel.Language_UI" For="@(() => ViewModel.Language_UI)" />
            <GameLanguageSelect Value="@ViewModel.Language_Parser" For="@(() => ViewModel.Language_Parser)" ValueChanged="OnGameLanguageChange" />
        </MudCardContent>
    </MudCard>

    <MudCard Class="mb-3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@SettingsResources.Character_Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <LeagueSelect @bind-Value="ViewModel.LeagueId" For="@(() => ViewModel.LeagueId)" @ref="RefLeagueSelect" />
            <MudTextField Label="@SettingsResources.Character_Name"
                          Variant="Variant.Filled"
                          @bind-Value="ViewModel.Character_Name" />
        </MudCardContent>
    </MudCard>

    <MudCard Class="mb-3">
        <MudCardContent>
            <MudCheckBox Label="@SettingsResources.General_SendCrashReports" @bind-Checked="@ViewModel.SendCrashReports" />
        </MudCardContent>
    </MudCard>

    <div class="d-flex justify-end">
        <MudButton OnClick="Exit"
                   Variant="Variant.Text"
                   Color="Color.Default">
            @Resources.Exit
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   ButtonType="ButtonType.Submit">
            @SettingsResources.Save
        </MudButton>
    </div>
</EditForm>

@code {
    [Inject] private SettingsResources SettingsResources { get; set; }
    [Inject] private SetupResources Resources { get; set; }
    [Inject] private IMediator Mediator { get; set; }
    [Inject] private SettingsViewModel ViewModel { get; set; }

    private LeagueSelect RefLeagueSelect;

    public async Task Exit()
    {
        await Mediator.Send(new ShutdownCommand());
    }

    public async Task Save()
    {
        await Mediator.Send(new SaveSettingsCommand(ViewModel, true));
        await Mediator.Send(new InitializeCommand(true, false));
    }

    public async Task OnGameLanguageChange(string value)
    {
        ViewModel.Language_Parser = value;
        await Mediator.Send(new Sidekick.Domain.Game.Languages.Commands.SetGameLanguageCommand(value));
        await RefLeagueSelect.RefreshOptions();
    }

    public class Validator : AbstractValidator<SettingsViewModel>
    {
        public Validator(SettingsResources resources)
        {
            RuleFor(v => v.Language_UI)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .WithName(resources.Language_UI);
            RuleFor(v => v.Language_Parser)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .WithName(resources.Language_Parser);
            RuleFor(v => v.LeagueId)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .WithName(resources.Character_League);
        }
    }
}
