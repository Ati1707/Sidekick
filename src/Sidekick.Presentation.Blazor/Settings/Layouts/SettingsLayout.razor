@using Sidekick.Domain.Cache.Commands
@using Sidekick.Domain.Initialization.Commands
@using Sidekick.Domain.Settings.Commands
@inherits LayoutComponentBase
@layout MenuLayout

<MudDrawer ClipMode="DrawerClipMode.Always"
           Open="true"
           Variant="DrawerVariant.Persistent">
    <MudDrawerHeader></MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings">@Resources.General</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings/price">@Resources.Trade</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings/map">@Resources.Map</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings/wiki">@Resources.Wiki</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings/chat">@Resources.Chat</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings/stash">@Resources.Stash</MudNavLink>
    </MudNavMenu>
</MudDrawer>

<MudMainContent>
    <MudContainer Class="py-6">
        @Body

        <div class="pt-6 d-flex">
            <div class="flex-grow-1">
                <MudButton Variant="Variant.Text"
                           OnClick="ResetCache">
                    @Resources.ResetCache
                </MudButton>
            </div>
            <div class="flex-grow-0">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="Save">
                    @Resources.Save
                </MudButton>
            </div>
        </div>
    </MudContainer>
</MudMainContent>

@code {
    [Inject] private SettingsResources Resources { get; set; }
    [Inject] private IMediator Mediator { get; set; }
    [Inject] private SettingsViewModel ViewModel { get; set; }
    [Inject] private IViewLocator ViewLocator { get; set; }
    [Inject] private IViewInstance ViewInstance { get; set; }

    [CascadingParameter] public MenuLayout Layout { get; set; }

    protected override void OnInitialized()
    {
        ViewInstance.SetTitle(Resources.Title);
        Layout.SetMenuIcon(false);
        base.OnInitialized();
    }

    public async Task Save()
    {
        await Mediator.Send(new SaveSettingsCommand(ViewModel));
        ViewLocator.Close(View.Settings);
    }

    public async Task ResetCache()
    {
        await Mediator.Send(new ClearCacheCommand());
        await Mediator.Send(new InitializeCommand(false, false));
    }
}
