
<MudSelect T="string" Variant="Variant.Filled" Label="Sort" Value="Sort" ValueChanged="InternalSortChanged">
    @foreach (var option in SortOptions)
    {
        <MudSelectItem Value="@option.Key">@option.Value</MudSelectItem>
    }
</MudSelect>

@code {
    [Inject] private IMediator Mediator { get; set; }
    [Inject] private ISidekickSettings Settings { get; set; }

    [Parameter] public EventCallback SortChanged { get; set; }

    private Dictionary<string, string> SortOptions { get; set; }
    private string Sort { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Sort = Settings.Cheatsheets_Betrayal_Sort;
        SortOptions = await Mediator.Send(new GetBetrayalSortOptionsQuery());
        await base.OnInitializedAsync();
    }

    public async Task InternalSortChanged(string sort)
    {
        Sort = sort;
        await Mediator.Send(new SaveSettingCommand(nameof(ISidekickSettings.Cheatsheets_Betrayal_Sort), Sort));
        await SortChanged.InvokeAsync();
    }
}
