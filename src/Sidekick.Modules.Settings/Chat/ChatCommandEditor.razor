@using Sidekick.Common.Settings

@foreach (var chatSetting in ChatSettings)
{
    <div class="pa-3">
        <MudGrid Spacing="0">
            <MudItem xs="4">
                <KeybindEditor Value="@chatSetting.Key"
                               ValueChanged="(v) => KeyChanged(chatSetting, v)"
                               Label="@Resources.Chat_Keybind"/>
            </MudItem>
            <MudItem xs="8" Class="pl-2">
                <MudTextField Value="@chatSetting.Command"
                              ValueChanged="(v) => CommandChanged(chatSetting, v)"
                              Label="@Resources.Chat_Command"
                              Variant="Variant.Filled"/>
            </MudItem>
        </MudGrid>

        <div class="d-flex justify-space-between mt-1">
            <MudButton OnClick="() => ToggleSubmit(chatSetting)"
                       StartIcon="@(chatSetting.Submit ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)"
                       Color="Color.Info"
                       Size="Size.Small"
                       IconSize="Size.Small"
                       Variant="Variant.Text">
                @Resources.Chat_Submit
            </MudButton>
            <MudButton OnClick="() => Remove(chatSetting)"
                       StartIcon="@Icons.Material.Filled.Delete"
                       Color="Color.Error"
                       Size="Size.Small"
                       IconSize="Size.Small"
                       Variant="Variant.Text">
                @Resources.Chat_Commands_Remove
            </MudButton>
        </div>
    </div>

    <MudDivider/>
}

<div class="d-flex justify-space-between pa-3">
    <MudButton Variant="Variant.Text"
               Color="Color.Default"
               OnClick="RestoreDefaults">
        @Resources.Restore_Defaults
    </MudButton>
    <MudButton Variant="Variant.Filled"
               Color="Color.Secondary"
               OnClick="Add">
        @Resources.Chat_Add
    </MudButton>
</div>

@inject SettingsResources Resources
@inject SettingsService SettingsService

@code {

    private List<ChatSetting> ChatSettings { get; set; } =
    [
    ];

    protected override async Task OnInitializedAsync()
    {
        ChatSettings = await SettingsService.GetObject<List<ChatSetting>>(SettingKeys.ChatCommands)
                       ??
                       [
                       ];
        await base.OnInitializedAsync();
    }

    private async Task Remove(ChatSetting chatSetting)
    {
        ChatSettings.Remove(chatSetting);
        await Save();
    }

    private async Task Add()
    {
        ChatSettings.Add(new ChatSetting("", "", true));
        await Save();
    }

    private async Task KeyChanged(
        ChatSetting chatSetting,
        string? key)
    {
        chatSetting.Key = key;
        await Save();
    }

    private async Task CommandChanged(
        ChatSetting chatSetting,
        string? command)
    {
        chatSetting.Command = command;
        await Save();
    }

    private async Task ToggleSubmit(ChatSetting chatSetting)
    {
        chatSetting.Submit = !chatSetting.Submit;
        await Save();
    }

    private async Task RestoreDefaults()
    {
        ChatSettings =
        [
            ..DefaultSettings.ChatCommands,
        ];
        await Save();
    }

    protected async Task Save()
    {
        await SettingsService.Set(SettingKeys.ChatCommands, ChatSettings);
    }

}
