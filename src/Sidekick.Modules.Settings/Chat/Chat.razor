@page "/settings/chat"
@layout SettingsLayout
@inherits SidekickView

<div class="pa-3">
    <MudText Typo="Typo.h1" Class="mb-3">@Resources.Chat_Commands</MudText>

    <MudText Typo="Typo.h5">@Resources.Chat_Common_Commands</MudText>
    <MudText>@Resources.Chat_Commands_Hideout</MudText>
    <MudText>@Resources.Chat_Commands_Leave</MudText>
    <MudText>@Resources.Chat_Commands_Exit</MudText>

    <MudText Typo="Typo.h5" Class="mt-3">@Resources.Chat_Wildcard</MudText>
    <MudText>@Resources.Chat_Wildcard_LastWhisper_CharacterName</MudText>

    <MudPaper Class="mt-3">
        @foreach (var chatSetting in ViewModel.Chat_Commands)
        {
            <div class="pa-3">
                <ChatCommandEditor ChatSetting="chatSetting"
                                   OnRemove="() => Remove(chatSetting)" />
            </div>

            <MudDivider />
        }

        <div class="d-flex justify-space-between pa-3">
            <MudButton Variant="Variant.Text"
                       Color="Color.Default"
                       OnClick="RestoreDefaults">
                @Resources.Restore_Defaults
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Secondary"
                       OnClick="Add">
                @Resources.Chat_Add
            </MudButton>
        </div>
    </MudPaper>
</div>

@code {
    [Inject] private SettingsResources Resources { get; set; }
    [Inject] private SettingsModel ViewModel { get; set; }

    public override string Title => Resources.Title;
    public override bool ShowSettingsButton => false;

    private void Remove(ChatSetting chatSetting)
    {
        ViewModel.Chat_Commands.Remove(chatSetting);
    }

    private void Add()
    {
        ViewModel.Chat_Commands.Add(new ChatSetting("", "", true));
    }

    private void RestoreDefaults()
    {
        ViewModel.Chat_Commands = Settings.GetDefaultChatCommands();
    }
}
