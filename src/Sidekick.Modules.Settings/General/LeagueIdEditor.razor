@using Sidekick.Common.Settings
<MudSelect T="string?"
           Label="@Resources.Character_League"
           Variant="Variant.Filled"
           Value="LeagueId"
           ValueChanged="LeagueChanged"
           Required="true"
           RequiredError="League is required!">
    @foreach (var option in Options)
    {
        <MudSelectItem Value="@option.Key">@option.Value</MudSelectItem>
    }
</MudSelect>

@inject SettingsResources Resources
@inject ISettingsService SettingsService
@inject ILeagueProvider LeagueProvider

@code {

    private string? LeagueId { get; set; }

    private Dictionary<string, string> Options { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        LeagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        await RefreshOptions();
        await base.OnInitializedAsync();
    }

    public async Task RefreshOptions()
    {
        var leagues = await LeagueProvider.GetList(true);
        Options = leagues
                  .GroupBy(x => x.Id)
                  .ToDictionary(
                      x => x.First()
                            .Id,
                      x => x.First()
                            .Text);
    }

    private async Task LeagueChanged(string? value)
    {
        LeagueId = value;
        await SettingsService.Set(SettingKeys.LeagueId, value);
    }

}
