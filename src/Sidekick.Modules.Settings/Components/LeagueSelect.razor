@using Sidekick.Domain.Game.Leagues.Queries
@using System.Linq.Expressions;

<MudSelect T="string"
           Label="@Resources.Character_League"
           Variant="Variant.Filled"
           Value="Value"
           For="For"
           ValueChanged="ValueChanged"
           OffsetY="true">
    @foreach (var option in Options)
    {
        <MudSelectItem Value="@option.Key">@option.Value</MudSelectItem>
    }
</MudSelect>

@code {
    [Inject] private SettingsResources Resources { get; set; }
    [Inject] private IMediator Mediator { get; set; }

    [Parameter] public string Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public Expression<Func<string>> For { get; set; }

    private Dictionary<string, string> Options { get; set; } = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshOptions();

        await base.OnInitializedAsync();
    }

    public async Task RefreshOptions()
    {
        var leagues = await Mediator.Send(new GetLeaguesQuery(true));
        if (leagues != null)
        {
            Options = leagues.ToDictionary(x => x.Id, x => x.Text);
        }
    }
}
