<MudField @onclick="Click"
          Label="@Label"
          Variant="Variant.Filled"
          Class="@Class"
          Adornment="Adornment.End"
          AdornmentIcon="@Icons.Material.Filled.Cancel"
          OnAdornmentClick="Delete">
    @if (Active)
    {
        <MudText>@Resources.Key_Active</MudText>
    }
    else if (string.IsNullOrEmpty(Value))
    {
        <MudText>@Resources.Key_Unset</MudText>
    }
    else
    {
        <MudText>@Value</MudText>
    }
</MudField>

@implements IDisposable

@inject SettingsResources Resources
@inject IKeyboardProvider Keyboard

@code {

    private static Guid? CurrentEditorId { get; set; }

    [Parameter]
    public required string Label { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    private Guid Id { get; } = Guid.NewGuid();

    private bool Active => CurrentEditorId == Id;

    private string? Class => Active ? "mud-info" : null;

    protected override void OnInitialized()
    {
        Keyboard.OnKeyDown += OnKeyDown;
        base.OnInitialized();
    }

    public void Click()
    {
        CurrentEditorId = CurrentEditorId == Id ? null : Id;
    }

    private void OnKeyDown(string key)
    {
        InvokeAsync(
            async () =>
            {
                if (!Active)
                {
                    return;
                }

                if (key != "Esc")
                {
                    await ValueChanged.InvokeAsync(key);
                }

                CurrentEditorId = null;
                StateHasChanged();
            });
    }

    public async Task Delete()
    {
        CurrentEditorId = null;
        await ValueChanged.InvokeAsync("");
    }

    public void Dispose()
    {
        Keyboard.OnKeyDown -= OnKeyDown;
    }

}
