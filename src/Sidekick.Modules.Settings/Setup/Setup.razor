@page "/setup"
@page "/"
@using System.Text
@using System.Text.Json
@using Sidekick.Common.Settings
@inherits SidekickView

<AppScrollArea>
    <TopContent>
        <AppLogo/>
    </TopContent>

    <ChildContent>
        @if (RequiresSetup)
        {
            if (NewLeagues)
            {
                <AlertInfo>@Resources["New leagues are available! Please make sure you have the desired league selected in the settings."]</AlertInfo>
            }

            @if (HasError)
            {
                <AlertError>@Resources["You must select a valid language and league to continue."]</AlertError>
            }

            <AppContainer>
                <LanguageParserEditor/>
                <LeagueIdEditor/>

                <div class="flex justify-end gap-2">
                    <ButtonSecondary OnClick="Exit">
                        @Resources["Exit"]
                    </ButtonSecondary>
                    <ButtonPrimary OnClick="() => Save()">
                        @Resources["Save"]
                    </ButtonPrimary>
                </div>
            </AppContainer>
        }
        else
        {
            <AppContainer>
                <div class="flex justify-end">
                    <ButtonPrimary OnClick="Exit">
                        @Resources["Exit"]
                    </ButtonPrimary>
                </div>
            </AppContainer>
        }
    </ChildContent>
</AppScrollArea>

@inject ISettingsService SettingsService
@inject IApplicationService ApplicationService
@inject ILeagueProvider LeagueProvider
@inject ICacheProvider CacheProvider
@inject IStringLocalizer<Setup> Resources

@code {

    private bool RequiresSetup { get; set; }

    private bool NewLeagues { get; set; }

    private bool HasError { get; set; }

    public override string Title => Resources["Setup"];

    public override SidekickViewType ViewType => SidekickViewType.Modal;

    public override int ViewHeight => 320;

    protected override async Task OnInitializedAsync()
    {
        var leagues = await LeagueProvider.GetList(false);
        var apiLeaguesHash = Convert.ToBase64String(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(leagues)));
        var settingsLeaguesHash = await SettingsService.GetString(SettingKeys.LeaguesHash);
        if (!string.IsNullOrEmpty(settingsLeaguesHash) && apiLeaguesHash != settingsLeaguesHash)
        {
            NewLeagues = true;
            CacheProvider.Clear();
        }

        await SettingsService.Set(SettingKeys.LeaguesHash, apiLeaguesHash);

        // Check to see if we should run Setup first before running the rest of the initialization process
        var leagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        if (string.IsNullOrEmpty(leagueId) || leagues.All(x => x.Id != leagueId))
        {
            RequiresSetup = true;
            await ViewLocator.Initialize(this);
        }
        else
        {
            NavigationManager.NavigateTo("/initialize");
        }

        await base.OnInitializedAsync();
    }

    public void Exit()
    {
        ApplicationService.Shutdown();
    }

    public async Task Save()
    {
        var leagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        var leagues = await LeagueProvider.GetList(true);
        if (leagues.All(x => x.Id != leagueId))
        {
            HasError = true;
            return;
        }

        NavigationManager.NavigateTo("/initialize");
    }

}
