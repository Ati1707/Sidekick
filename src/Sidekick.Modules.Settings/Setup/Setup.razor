@page "/setup"
@page "/"
@layout ModalLayout
@using System.Text
@using System.Text.Json
@using Sidekick.Common.Settings
@inherits SidekickView

@if (!RequiresSetup)
{
    <SidekickLogo/>

    <MudCard Class="my-1">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Align="Align.Center">@Resources.Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudProgressLinear Color="Color.Primary"
                               Indeterminate="true"/>
        </MudCardContent>
    </MudCard>

    <div class="d-flex justify-end">
        <MudButton OnClick="Exit"
                   Variant="Variant.Text"
                   Color="Color.Default">
            @Resources.Exit
        </MudButton>
    </div>
}
else
{
    <SidekickLogo/>

    @if (NewLeagues)
    {
        <MudAlert Variant="Variant.Filled" Severity="Severity.Info" Class="mt-1 mb-3">@Resources.NewLeagues</MudAlert>
    }

    @if (HasError)
    {
        <MudAlert Variant="Variant.Filled" Severity="Severity.Error" Class="mt-1 mb-3">@StringLocalizer["You must select a valid language and league to continue."]</MudAlert>
    }

    <MudForm>
        <MudCard Class="mt-1">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">@SettingsResources.Game_Title</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <LanguageParserEditor/>
                <LeagueIdEditor/>
            </MudCardContent>
        </MudCard>

        <div class="d-flex justify-end">
            <MudButton OnClick="Exit"
                       Variant="Variant.Text"
                       Color="Color.Default">
                @Resources.Exit
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="() => Save()">
                @SettingsResources.Save
            </MudButton>
        </div>
    </MudForm>
}

@inject SettingsResources SettingsResources
@inject SetupResources Resources
@inject ISettingsService SettingsService
@inject IApplicationService ApplicationService
@inject ILeagueProvider LeagueProvider
@inject ICacheProvider CacheProvider
@inject IStringLocalizer<SetupResources> StringLocalizer
@inject IViewLocator ViewLocator

@code {

    private bool RequiresSetup { get; set; }

    private bool NewLeagues { get; set; }

    private bool HasError { get; set; }

    public override string Title => "Setup";

    public override SidekickViewType ViewType => SidekickViewType.Modal;

    public override int ViewHeight => NewLeagues ? 400 : 320;

    protected override async Task OnInitializedAsync()
    {
        var leagues = await LeagueProvider.GetList(false);
        var apiLeaguesHash = Convert.ToBase64String(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(leagues)));
        var settingsLeaguesHash = await SettingsService.GetString(SettingKeys.LeaguesHash);
        if (!string.IsNullOrEmpty(settingsLeaguesHash) && apiLeaguesHash != settingsLeaguesHash)
        {
            NewLeagues = true;
            CacheProvider.Clear();
            await SettingsService.Set(SettingKeys.LeaguesHash, apiLeaguesHash);
        }

        // Check to see if we should run Setup first before running the rest of the initialization process
        var leagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        if (string.IsNullOrEmpty(leagueId) || leagues.All(x => x.Id != leagueId))
        {
            RequiresSetup = true;
            await ViewLocator.Initialize(this);
        }
        else
        {
            await ViewLocator.Open("/initialize");
            await Close();
        }

        await base.OnInitializedAsync();
    }

    public void Exit()
    {
        ApplicationService.Shutdown();
    }

    public async Task Save()
    {
        var leagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        var leagues = await LeagueProvider.GetList(true);
        if (leagues.All(x => x.Id != leagueId))
        {
            HasError = true;
            return;
        }

        await ViewLocator.Open("/initialize");
        await Close();
    }

}
