@page "/settings/wealth"
@using Sidekick.Common.Settings
@using System.Diagnostics;
@layout SettingsLayout
@inherits SidekickView

@if (Enabled)
{
    <Sidekick.Common.Blazor.Authentication.AuthenticationStatusBar/>
}

<div class="pa-3">
    <MudText Typo="Typo.h1" Class="mb-3">@Resources.WealthTracker</MudText>

    @if (!Enabled)
    {
        <MudAlert Severity="Severity.Warning" Elevation="0" Class="mb-3">Wealth Tracker is an experimental feature and requires special privileges.</MudAlert>

        <MudAlert Severity="Severity.Info" Elevation="0" Class="mb-3">
            <MudText Typo="Typo.body2">
                Sidekick is registered with GGG to allow the use of the Path Of Exile API. Sidekick utilizes Oath2 Authorization Code Grant to securely access your account details. Read more information from the Path of Exile developer website.
                <MudLink Href="https://www.pathofexile.com/developer/docs/authorization">https://www.pathofexile.com/developer/docs/authorization</MudLink>
            </MudText>
        </MudAlert>

        <MudPaper Class="pa-3 mb-3">
            <MudText Typo="Typo.body1">
                The Sidekick Wealth Tracker is meant to help players track their overall wealth progress over time. In order to achieve this, Sidekick requires access to the player's account stash data. When Wealth Tracker is enabled, Sidekick will take the following steps to gain secure access to your stash data from the official Path of Exile API.
            </MudText>

            <MudList>
                <MudListItem Text="Sidekick will request Administrative Access on your computer. This is to register a custom Sidekick:// protocol on your system. Sidekick uses this to securely receive Oauth data from GGG." Icon="@Icons.Material.Filled.Bookmark" IconColor="Color.Primary"/>
                <MudListItem Text="Sidekick will launch a browser window to 'https://www.pathofexile.com/oauth/authorize'. You will be asked to Authorize Sidekick and GGG will provide your details to Sidekick. Sidekick will then be able to securely access your account stash data." Icon="@Icons.Material.Filled.Bookmark" IconColor="Color.Primary"/>
                <MudListItem Text="If you get unauthenticated, Sidekick will automatically repeat the above steps in order to reauthenticate." Icon="@Icons.Material.Filled.Bookmark" IconColor="Color.Primary"/>
            </MudList>
        </MudPaper>

        <div class="d-flex justify-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="ToggleWealthTracker">Enable Wealth Tracker</MudButton>
        </div>
    }
    else
    {
        <MudPaper Class="pa-3">
            <MudText Typo="Typo.h3" Class="mb-3">@Resources.Group_Keybinds</MudText>
            <KeyOpenWealthEditor/>
        </MudPaper>

        <MudPaper Class="pa-3 mb-3 mt-3">
            <MudText Typo="Typo.h3" Class="mb-3">@Resources.WealthTracker_StashTabs</MudText>
            <MudText Typo="Typo.body1" Class="mb-3">@Resources.WealthTracker_StashTabsInstructions</MudText>

            @if (StashTabs != null)
            {
                <MudGrid Spacing="0">
                    @foreach (var stashTab in StashTabs)
                    {
                        <MudItem xs="6">
                            <FormCheckBox Value="IsChecked(stashTab)"
                                          ValueChanged="() => Toggle(stashTab)"
                                          Label="@stashTab.Name"/>
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <LoadingIcon/>
            }
        </MudPaper>

        <div class="d-flex justify-end">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ToggleWealthTracker">Disable Wealth Tracker</MudButton>
        </div>
    }
</div>

@implements IDisposable
@inject SettingsResources Resources
@inject IAuthenticationService AuthenticationService
@inject IStashService StashService
@inject ISettingsService SettingsService

@code {

    private bool Enabled { get; set; }

    private List<string> SelectedTabs { get; set; } =
    [
    ];

    private List<StashTab>? StashTabs { get; set; }

    public override string Title => Resources.Title;

    protected override async Task OnInitializedAsync()
    {
        Enabled = await SettingsService.GetBool(SettingKeys.WealthEnabled);
        SelectedTabs = (await SettingsService.GetString(SettingKeys.WealthTrackedTabs))
                       ?.Split(',')
                       .ToList()
                       ??
                       [
                       ];
        AuthenticationService.OnAuthenticated += OnAuthenticated;

        if (Enabled)
        {
            await LoadStashTabs();
        }

        await base.OnInitializedAsync();
    }

    private async Task ToggleWealthTracker()
    {
        Enabled = !Enabled;
        await SettingsService.Set(SettingKeys.WealthEnabled, Enabled);

        if (Enabled)
        {
            var startInfo = new ProcessStartInfo(@"Sidekick.Protocol.exe")
            {
                Verb = "runas",
                UseShellExecute = true,
            };

            Process.Start(startInfo);

            await LoadStashTabs();
        }
    }

    private async Task LoadStashTabs()
    {
        await AuthenticationService.Authenticate();
        StashTabs = await StashService.GetStashTabList();
        StateHasChanged();
    }

    private void OnAuthenticated()
    {
        _ = InvokeAsync(LoadStashTabs);
    }

    private bool IsChecked(StashTab tab) => SelectedTabs.Contains(tab.Id);

    private async Task Toggle(StashTab tab)
    {
        if (IsChecked(tab))
        {
            SelectedTabs.Remove(tab.Id);
        }
        else
        {
            SelectedTabs.Add(tab.Id);
        }

        await SettingsService.Set(SettingKeys.WealthTrackedTabs, string.Join(',', SelectedTabs));
    }

    public void Dispose()
    {
        AuthenticationService.OnAuthenticated -= OnAuthenticated;
    }

}
