@using Sidekick.Common.Exceptions

<LoggingErrorBoundary @ref="Boundary">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        @if (ErrorContent != null)
        {
            @ErrorContent(this)
        }
        else if (ShowError)
        {
            <AlertError>
                <Heading3>An error occured!</Heading3>
                <TextBase Class="mt-1">@Message</TextBase>

                @if (!string.IsNullOrEmpty(AdditionalInformation))
                {
                    <TextCaption Class="mt-1">Additional Information: <b>@AdditionalInformation</b></TextCaption>
                }

                <div class="hidden mt-1">
                    <div>
                        @Exception?.Message
                    </div>
                    <div>
                        @((MarkupString)(Exception?.StackTrace?.Replace("\n", "<br/>") ?? ""))
                    </div>
                </div>
            </AlertError>
        }
    </ErrorContent>
</LoggingErrorBoundary>

@inject ICurrentView CurrentView

@code {

    /// <summary>
    /// Gets or sets the content of the wrapper.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the content of the wrapper.
    /// </summary>
    [Parameter]
    public RenderFragment<SidekickErrorBoundary>? ErrorContent { get; set; }

    [Parameter]
    public bool Root { get; set; }

    private LoggingErrorBoundary? Boundary { get; set; }

    public Exception? Exception => Boundary?.CurrentException;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Boundary?.CurrentException != null)
        {
            if (!CurrentView.IsInitialized)
            {
                await CurrentView.Close();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private bool ShowError => Exception?.GetType() != typeof(SilentException);

    public string Message
    {
        get
        {
            if (Boundary?.CurrentException is SidekickException sidekickException)
            {
                return sidekickException.Message;
            }

            return "This application may no longer respond until reloaded. If this issue keeps reoccurring, please open a ticket on our github page.";
        }
    }

    public string? AdditionalInformation
    {
        get
        {
            if (Boundary?.CurrentException is SidekickException sidekickException)
            {
                return sidekickException.AdditionalInformation;
            }

            return null;
        }
    }

}
