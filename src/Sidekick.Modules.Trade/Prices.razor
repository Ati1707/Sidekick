@page "/trade/{itemText}"
@layout OverlayLayout

@if (Item != null)
{
    <FiltersComponent Item="Item" ModifierFilters="ModifierFilters" PropertyFilters="PropertyFilters" OnSearch="UpdateQuery" />
}

<div class="ml-0">
    @if (IsError)
    {
        <MudAlert Severity="Severity.Error">@Resources.Error_PoeApi</MudAlert>

        @if (QueryResult?.Error != null)
        {
            <MudAlert Class="mt-1" Severity="Severity.Error">@Resources.Error_PoeApiMessage <b>@QueryResult.Error.Message</b></MudAlert>
        }
    }

    @if (Item != null)
    {
        <PriceOptionsComponent Item="Item"
                           QueryId="@QueryResult?.Id"
                           @bind-Layout="Layout"
                           Count="Results?.Count ?? 0"
                           Total="QueryResult?.Total ?? 0"
                           CanExpand="CanExpand" />
    }

    @if (Results != null)
    {
        foreach (var result in Results)
        {
            <ItemComponent Item="result" Layout="Layout" CanExpand="CanExpand" />
        }

        if (IsFetching)
        {
            <MudSkeleton Height="100px" Width="100%" SkeletonType="SkeletonType.Rectangle" />
        }
    }

    @if (!IsFetching && !FullyLoaded && Results != null)
    {
        <MudButton Variant="Variant.Outlined" Color="Color.Info" FullWidth="true" OnClick="LoadMoreData" Class="mt-2">@Resources.LoadMoreData</MudButton>
    }
</div>

@code {
    [Inject] private IViewInstance ViewInstance { get; set; }
    [Inject] private ITradeSearchService TradeSearchService { get; set; }
    [Inject] private IItemStaticDataProvider ItemStaticDataProvider { get; set; }
    [Inject] private ISettings Settings { get; set; }
    [Inject] private TradeResources Resources { get; set; }
    [Inject] private IItemParser ItemParser { get; set; }
    [Inject] private ITradeFilterService TradeFilterService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    [Parameter] public string ItemText { get; set; }

    private Item Item { get; set; }
    private PropertyFilters PropertyFilters { get; set; }
    private List<ModifierFilter> ModifierFilters { get; set; }
    private TradeSearchResult<string> QueryResult { get; set; }
    private List<TradeItem> Results { get; set; }
    private bool FullyLoaded => (Results?.Count ?? 0) == (QueryResult?.Result?.Count ?? 0);
    private bool IsError { get; set; }
    private bool IsFetching { get; set; }
    private bool FiltersReady { get; set; }
    private Layout Layout { get; set; }

    private bool CanExpand => Item?.Metadata?.Category switch
    {
        Category.Accessory => true,
        Category.Armour => true,
        Category.Flask => true,
        Category.Gem => true,
        Category.Jewel => true,
        Category.Map => true,
        Category.Weapon => true,
        Category.HeistEquipment => true,
        Category.Contract => true,
        Category.Logbook => true,
        Category.Sentinel => true,
        _ => false,
    };

    protected override async Task OnInitializedAsync()
    {
        Item = ItemParser.ParseItem(ItemText.DecodeBase64Url());

        if (Item == null)
        {
            NavigationManager.NavigateTo("/error/unparsable");
            return;
        }

        await ViewInstance.Initialize(Resources.Trade, isOverlay: true, closeOnBlur: Settings.Trade_CloseWithMouse);
        PropertyFilters = TradeFilterService.GetPropertyFilters(Item);
        ModifierFilters = TradeFilterService.GetModifierFilters(Item);
        FiltersReady = true;

        if (Item.Metadata.Rarity != Rarity.Rare && Item.Metadata.Rarity != Rarity.Magic)
        {
            await UpdateQuery();
        }

        await base.OnInitializedAsync();
    }

    public async Task UpdateQuery()
    {
        Results = new List<TradeItem>();
        IsError = false;
        IsFetching = true;

        //if (Item.Metadata.Rarity == Rarity.Currency && ItemStaticDataProvider.GetId(Item) != null)
        //{
        //    QueryResult = await TradeSearchService.SearchBulk(Item);
        //}
        //else
        //{
        QueryResult = await TradeSearchService.Search(Item, PropertyFilters, ModifierFilters);
        //}

        IsFetching = false;

        if (QueryResult == null || QueryResult?.Error != null)
        {
            IsError = true;
        }
        else
        {
            await LoadMoreData();
        }
    }

    public async Task LoadMoreData()
    {
        if (IsFetching)
        {
            return;
        }

        var ids = QueryResult.Result.Skip(Results?.Count ?? 0).Take(10).ToList();
        if (ids.Count == 0)
        {
            return;
        }

        IsFetching = true;

        var result = await TradeSearchService.GetResults(QueryResult.Id, ids, ModifierFilters);
        if (result != null)
        {
            Results.AddRange(result);
        }

        IsFetching = false;

        StateHasChanged();
    }
}
