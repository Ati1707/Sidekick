@page "/trade/{itemName}/{itemText}"
@using Sidekick.Common.Enums;
@using Sidekick.Modules.Trade.Models;
@inherits SidekickView

@if (Item == null)
{
    <LoadingAlert Text="@Resources.Parsing" />
}
else
{
    <CascadingValue Value="Item" IsFixed="true">
        @if (Filters != null)
        {
            <CascadingValue Value="Filters" IsFixed="true">
                <FiltersComponent ItemName="@ItemName.DecodeBase64Url()"
                                  OnSearch="UpdateQuery" />
            </CascadingValue>
        }

        <div class="ml-0">
            <PriceOptionsComponent @bind-Layout="Layout"
                                   Item="Item"
                                   QueryId="@QueryResult?.Id"
                                   Count="Results?.Count ?? 0"
                                   Total="QueryResult?.Total ?? 0"
                                   CanExpand="CanExpand"
                                   Changed="UpdateQuery" />

            @if (Results != null)
            {
                foreach (var result in Results)
                {
                    <ItemComponent @key="result.Id" Item="result" Layout="Layout" CanExpand="CanExpand" />
                }
            }

            @if (IsFetching)
            {
                <LoadingAlert Text="Loading results" />
            }

            @if (!IsFetching && !FullyLoaded && Results != null)
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Info" FullWidth="true" OnClick="LoadMoreData" Class="mt-2">@Resources.LoadMoreData</MudButton>
            }
        </div>
    </CascadingValue>
}

@code {
    [Inject] private ITradeSearchService TradeSearchService { get; set; }
    [Inject] private IItemStaticDataProvider ItemStaticDataProvider { get; set; }
    [Inject] private ISettings Settings { get; set; }
    [Inject] private TradeResources Resources { get; set; }
    [Inject] private IItemParser ItemParser { get; set; }
    [Inject] private ITradeFilterService TradeFilterService { get; set; }

    [Parameter] public string ItemName { get; set; }
    [Parameter] public string ItemText { get; set; }

    public Item Item { get; set; }
    public FiltersModel Filters { get; set; }
    public TradeSearchResult<string> QueryResult { get; set; }
    public List<TradeItem> Results { get; set; }
    public bool FullyLoaded => (Results?.Count ?? 0) == (QueryResult?.Result?.Count ?? 0);
    public bool IsFetching { get; set; }
    private Layout Layout { get; set; }

    public override string Title => Resources.Trade;
    public override bool CloseOnBlur => Settings.Trade_CloseWithMouse;
    public override SidekickViewType ViewType => SidekickViewType.Overlay;

    private bool CanExpand => Item?.Metadata?.Category switch
    {
        Category.Accessory => true,
        Category.Armour => true,
        Category.Flask => true,
        Category.Gem => true,
        Category.Jewel => true,
        Category.Map => Item.Metadata.Class != Class.MapFragments,
        Category.Weapon => true,
        Category.HeistEquipment => true,
        Category.Contract => true,
        Category.Logbook => true,
        Category.Sentinel => true,
        _ => false,
    };

    protected override async Task OnParametersSetAsync()
    {
        Item = await ItemParser.ParseItemAsync(ItemText.DecodeBase64Url());
        if (Item == null)
        {
            NavigationManager.NavigateTo(ErrorType.Unparsable.ToUrl());
            return;
        }

        Filters = new FiltersModel()
            {
                PropertyFilters = TradeFilterService.GetPropertyFilters(Item),
                ModifierFilters = TradeFilterService.GetModifierFilters(Item).ToList(),
                PseudoFilters = TradeFilterService.GetPseudoModifierFilters(Item).ToList(),
            };

        if (Item.Metadata.Rarity != Rarity.Rare && Item.Metadata.Rarity != Rarity.Magic)
        {
            await UpdateQuery();
        }

        await base.OnParametersSetAsync();
    }

    public async Task UpdateQuery()
    {
        Results = new List<TradeItem>();
        IsFetching = true;

        //if (Item.Metadata.Rarity == Rarity.Currency && ItemStaticDataProvider.GetId(Item) != null)
        //{
        //    QueryResult = await TradeSearchService.SearchBulk(Item);
        //}
        //else
        //{
        QueryResult = await TradeSearchService.Search(Item, new()
            {
                Currency = Settings.Trade_Currency.GetEnumFromValue<TradeCurrency>(),
            }, Filters.PropertyFilters, Filters.ModifierFilters, Filters.PseudoFilters);
        //}

        IsFetching = false;

        if (QueryResult == null || QueryResult?.Error != null)
        {
            NavigationManager.NavigateTo(ErrorType.ApiError.ToUrl(QueryResult?.Error?.Message));
            return;
        }
        else
        {
            await LoadMoreData();
        }
    }

    public async Task LoadMoreData()
    {
        if (IsFetching)
        {
            return;
        }

        var ids = QueryResult.Result.Skip(Results?.Count ?? 0).Take(10).ToList();
        if (ids.Count == 0)
        {
            return;
        }

        IsFetching = true;

        var result = await TradeSearchService.GetResults(QueryResult.Id, ids, Filters.PseudoFilters);
        if (result != null)
        {
            Results.AddRange(result);
        }

        IsFetching = false;

        StateHasChanged();
    }
}
