@page "/trade/{itemText}"
@using Sidekick.Apis.Poe.Bulk;
@using Sidekick.Common.Settings
@inherits SidekickView

@if (Item == null)
{
    <LoadingAlert Text="@Resources.Parsing"/>
    return;
}

<CascadingValue Value="Item" IsFixed="true">
    <CascadingValue Value="Filters" IsFixed="true">
        @if (Filters != null)
        {
            <FiltersComponent OnSearch="UpdateQuery"/>
        }

        <div class="ml-0">
            <SidekickErrorBoundary>
                <BulkResult @ref="BulkResult" Visible="Mode == TradeMode.Bulk"/>
                <ItemsResult @ref="ItemsResult" Visible="Mode == TradeMode.Item"/>
            </SidekickErrorBoundary>
        </div>

    </CascadingValue>
</CascadingValue>

@inject IBulkTradeService BulkTradeService
@inject ISettingsService SettingsService
@inject TradeResources Resources
@inject IItemParser ItemParser
@inject ITradeFilterService TradeFilterService

@code {

    [Parameter]
    public required string ItemText { get; set; }

    private Item? Item { get; set; }

    private FiltersModel? Filters { get; set; }

    private ItemsResult? ItemsResult { get; set; }

    private BulkResult? BulkResult { get; set; }

    private TradeMode Mode { get; set; }

    private bool UpdateAfterRender { get; set; }

    public override string Title => Resources.Trade;

    public override bool CloseOnBlur { get; set; }

    public override SidekickViewType ViewType => SidekickViewType.Overlay;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrEmpty(ItemText))
        {
            return;
        }

        Mode = TradeMode.Item;
        if (BulkTradeService.SupportsBulkTrade(Item))
        {
            Mode = await SettingsService.GetEnum<TradeMode>(SettingKeys.PriceCheckCurrencyMode) ?? TradeMode.Item;
        }

        CloseOnBlur = await SettingsService.GetBool(SettingKeys.PriceCheckCloseWithMouse);
        Item = await ItemParser.ParseItemAsync(ItemText.DecodeBase64Url() ?? string.Empty);

        Filters = new FiltersModel()
        {
            PropertyFilters = TradeFilterService.GetPropertyFilters(Item),
            ModifierFilters = TradeFilterService
                              .GetModifierFilters(Item)
                              .ToList(),
            PseudoFilters = TradeFilterService
                            .GetPseudoModifierFilters(Item)
                            .ToList(),
        };

        if (Item.Metadata.Rarity != Rarity.Rare && Item.Metadata.Rarity != Rarity.Magic)
        {
            await UpdateQuery();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (UpdateAfterRender)
        {
            await UpdateQuery();
        }
    }

    public async Task UpdateQuery()
    {
        if (BulkResult == null || ItemsResult == null)
        {
            UpdateAfterRender = true;
            return;
        }

        UpdateAfterRender = false;
        if (Mode == TradeMode.Bulk)
        {
            await BulkResult.Search();
        }
        else
        {
            await ItemsResult.Search();
        }
    }

}
