@using Sidekick.Apis.Poe.Metadata
@using Sidekick.Common.Game.Items
@using Sidekick.Common.Game.Languages
@using Sidekick.Modules.Trade.Localization
@if (Visible)
{
    <FilterWrapper>
        <div class="flex items-center flex-nowrap justify-between">
            <FormCheckbox Value="!string.IsNullOrEmpty(PriceCheckService.PropertyFilters?.ItemCategory)"
                          ValueChanged="CheckedChanged"
                          NoMargin="true">
                <ItemPropertyText Label="@Resources["Item Class"]"
                                  Value="@ClassLabel"/>
            </FormCheckbox>
            <TooltipHint Bottom="true"
                         Text="@Resources["If checked, Sidekick will search for all items of this class. If left unchecked, Sidekick will search for this specific type. (e.g. Type: Prophet Crown vs Class: Helmet)"]"/>
        </div>
    </FilterWrapper>

    <ItemSeparator Rarity="PriceCheckService.Item?.Metadata.Rarity ?? Rarity.Unknown"/>
}

@inject IGameLanguageProvider GameLanguageProvider
@inject IStringLocalizer<TradeResources> Resources
@inject PriceCheckService PriceCheckService
@inject IMetadataProvider MetadataProvider

@code {

    private bool Visible => PriceCheckService.Item?.Metadata.Rarity is Rarity.Rare or Rarity.Magic or Rarity.Normal && !string.IsNullOrEmpty(PriceCheckService.Item.Header.ItemCategory) && !string.IsNullOrEmpty(ClassLabel);

    private string? ClassLabel { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (PriceCheckService.Item == null)
        {
            return;
        }

        ClassLabel = MetadataProvider.ApiItemCategories.FirstOrDefault(x => x.Id == PriceCheckService.Item?.Header.ItemCategory)?.Text;
    }

    private void CheckedChanged(bool value)
    {
        if (PriceCheckService.PropertyFilters == null)
        {
            return;
        }

        if (value)
        {
            PriceCheckService.PropertyFilters.ItemCategory = PriceCheckService.Item?.Header.ItemCategory;
        }
        else
        {
            PriceCheckService.PropertyFilters.ItemCategory = null;
        }
    }

}
