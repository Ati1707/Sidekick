@using Sidekick.Common.Game.Items

@{
    var implicitFilters = PriceCheckService.ModifierFilters
        .Where(x => x.Line.Modifiers.FirstOrDefault()?.Category == ModifierCategory.Implicit)
        .ToList();

    var explicitFilters = PriceCheckService.ModifierFilters
        .Where(x => x.Line.Modifiers.FirstOrDefault()?.Category != ModifierCategory.Implicit)
        .ToList();
}

@if (implicitFilters.Any())
{
    <TextCaption Class="font-caps text-[#AA9E82] text-center leading-none py-0.5">Implicit Modifiers</TextCaption>
    @foreach (var filter in implicitFilters)
    {
        <CascadingValue Value="filter" IsFixed="true">
            <ModifierFilterComponent/>
        </CascadingValue>
    }
    <ItemSeparator Rarity="PriceCheckService.Item?.Metadata.Rarity ?? Rarity.Unknown"/>
}

@for (var i = 0; i < explicitFilters.Count; i++)
{
    <CascadingValue Value="explicitFilters[i]" IsFixed="true">
        <ModifierFilterComponent/>
    </CascadingValue>

    var isLastFilter = i + 1 == explicitFilters.Count;
    if (!isLastFilter)
    {
        var isDifferentCategoryThanNext = NormalizeModifierCategory(
                                            explicitFilters[i]
                                                .Line.Modifiers.FirstOrDefault()
                                                ?.Category)
                                        != NormalizeModifierCategory(
                                            explicitFilters[i + 1]
                                                .Line.Modifiers.FirstOrDefault()
                                                ?.Category);
        if (isDifferentCategoryThanNext)
        {
            <ItemSeparator Rarity="PriceCheckService.Item?.Metadata.Rarity ?? Rarity.Unknown"/>
        }
    }
}

@inject PriceCheckService PriceCheckService

@code {
    private ModifierCategory? NormalizeModifierCategory(ModifierCategory? category) => category switch
    {
        ModifierCategory.Fractured => ModifierCategory.Explicit,
        ModifierCategory.Crafted => ModifierCategory.Explicit,
        _ => category,
    };
}
