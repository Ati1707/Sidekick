@using Sidekick.Apis.Poe.Bulk;
@using Sidekick.Common.Settings
@using Sidekick.Common.Ui.Errors

<MudDrawer Open="true"
           Variant="@DrawerVariant.Persistent"
           Width="22em"
           Class="black"
           ClipMode="DrawerClipMode.Always">
    <ItemHeader Name="@Item.Header.Name"
                         Type="@Item.Header.Type"
                         Rarity="Item.Metadata.Rarity"
                         Influences="Item.Influences"/>

    <div class="flex-grow-1" style="overflow-y:auto;">
        <SidekickErrorBoundary>
            <PriceNinjaComponent/>
        </SidekickErrorBoundary>
        <SidekickErrorBoundary>
            <PricePredictionComponent/>
        </SidekickErrorBoundary>

        <ClassFilter @bind-Value="Filters.PropertyFilters.Class" Item="Item"/>

        <CascadingValue Value="Filters.PropertyFilters.Armour" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity"/>
        </CascadingValue>

        <CascadingValue Value="Filters.PropertyFilters.Weapon" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity"/>
        </CascadingValue>

        <CascadingValue Value="Filters.PropertyFilters.Map" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity"/>
        </CascadingValue>

        <CascadingValue Value="Filters.PropertyFilters.Misc" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity"/>
        </CascadingValue>

        <ModifierFiltersComponent Rarity="Item.Metadata.Rarity"/>

        <PseudoFiltersComponent Rarity="Item.Metadata.Rarity"/>
    </div>

    @if (SupportsBulkRequest)
    {
        <div class="mode-select">
            <MudButtonGroup Size="Size.Small" Variant="Variant.Filled" Color="Color.Info" Class="pt-2 px-2" Style="width: 100%;">
                <MudButton OnClick="() => SelectModeButton(TradeMode.Item)"
                           FullWidth="true"
                           Class="@GetModeButtonClass(TradeMode.Item)"
                           StartIcon="@GetModeButtonIcon(TradeMode.Item)">
                    @Resources.Mode_Item
                </MudButton>
                <MudButton OnClick="() => SelectModeButton(TradeMode.Bulk)"
                           FullWidth="true"
                           Class="@GetModeButtonClass(TradeMode.Bulk)"
                           StartIcon="@GetModeButtonIcon(TradeMode.Bulk)">
                    @Resources.Mode_Bulk
                </MudButton>
                @if (Mode == TradeMode.Bulk)
                {
                    <MudTooltip Text="@Resources.MinStock" Placement="Placement.Top">
                        <MudInput T="string" Placeholder="Min" @bind-Value="MinStock" Variant="Variant.Outlined"/>
                    </MudTooltip>
                }
            </MudButtonGroup>
        </div>
    }

    @if (HasAnyFilter || SupportsBulkRequest)
    {
        <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary" Class="pa-2" Style="width: 100%;">
            <MudButton FullWidth
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="Search">
                @Resources.Filters_Submit
            </MudButton>
            <TradeCurrencySelect @bind-Value="Currency"/>
        </MudButtonGroup>
    }
</MudDrawer>

@inject TradeResources Resources
@inject ISettingsService SettingsService
@inject IBulkTradeService BulkTradeService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    [CascadingParameter]
    public required FiltersModel Filters { get; set; }

    [Parameter]
    public EventCallback OnSearch { get; set; }

    private bool SupportsBulkRequest => BulkTradeService.SupportsBulkTrade(Item);

    private bool HasAnyFilter { get; set; }

    private TradeMode Mode { get; set; }

    private TradeCurrency Currency { get; set; }

    private string? MinStock { get; set; }

    protected override async Task OnInitializedAsync()
    {
       await base.OnInitializedAsync();

        Mode = await SettingsService.GetEnum<TradeMode>(SettingKeys.PriceCheckCurrencyMode) ?? TradeMode.Item;
        await SetInitialCurrencyValue();

        var propertyCount = 0;
        propertyCount += Filters.PropertyFilters.Armour.Count;
        propertyCount += Filters.PropertyFilters.Map.Count;
        propertyCount += Filters.PropertyFilters.Misc.Count;
        propertyCount += Filters.PropertyFilters.Weapon.Count;

        var modifierCount = 0;
        modifierCount += Filters.ModifierFilters.Count;

        HasAnyFilter = modifierCount + propertyCount > 0;
    }

    private async Task SetInitialCurrencyValue()
    {
        if (Mode == TradeMode.Bulk)
        {
            Currency = await SettingsService.GetEnum<TradeCurrency>(SettingKeys.PriceCheckBulkCurrency) ?? TradeCurrency.Divine;
        }
        else
        {
            Currency = await SettingsService.GetEnum<TradeCurrency>(SettingKeys.PriceCheckItemCurrency) ?? TradeCurrency.ChaosEquivalent;
        }

        MinStock = (await SettingsService.GetInt(SettingKeys.PriceCheckBulkMinimumStock)).ToString();
    }

    private string GetModeButtonClass(TradeMode value)
    {
        return Mode != value ? "unselected" : "";
    }

    private string? GetModeButtonIcon(TradeMode value)
    {
        return Mode == value ? Icons.Material.Filled.Check : null;
    }

    private async Task SelectModeButton(TradeMode value)
    {
        Mode = value;
        await SetInitialCurrencyValue();
    }

    private async Task Search()
    {
        if (SupportsBulkRequest)
        {
            await SettingsService.Set(SettingKeys.PriceCheckCurrencyMode, Currency);
        }

        if (Mode == TradeMode.Bulk)
        {
            await SettingsService.Set(SettingKeys.PriceCheckBulkCurrency, Currency);
            if (int.TryParse(MinStock, out var minStock))
            {
                await SettingsService.Set(SettingKeys.PriceCheckBulkMinimumStock, minStock);
            }
        }
        else
        {
            await SettingsService.Set(SettingKeys.PriceCheckItemCurrency, Currency);
        }

        await OnSearch.InvokeAsync();
    }

}
