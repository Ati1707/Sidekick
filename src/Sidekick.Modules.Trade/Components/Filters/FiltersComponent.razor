@using Sidekick.Common.Enums

<MudDrawer Open="true"
           Variant="@DrawerVariant.Persistent"
           Width="22em"
           Class="black"
           ClipMode="DrawerClipMode.Always">
    <ItemHeaderComponent Name="@Item.Original.Name"
                         Type="@Item.Original.Type"
                         Rarity="Item.Metadata.Rarity"
                         Influences="Item.Influences"
                         IsRelic="Item.Properties.IsRelic" />

    <div class="flex-grow-1" style="overflow-y:auto;">
        @if (Item != null)
        {
            <PriceNinjaComponent ItemName="@ItemName" />
            <PricePredictionComponent />
        }

        <ClassFilter @bind-Value="Filters.PropertyFilters.Class" Item="Item" />

        <CascadingValue Value="Filters.PropertyFilters.Armour" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity" />
        </CascadingValue>

        <CascadingValue Value="Filters.PropertyFilters.Weapon" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity" />
        </CascadingValue>

        <CascadingValue Value="Filters.PropertyFilters.Map" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity" />
        </CascadingValue>

        <CascadingValue Value="Filters.PropertyFilters.Misc" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity" />
        </CascadingValue>

        <ModifierFiltersComponent Rarity="Item.Metadata.Rarity" />

        <PseudoFiltersComponent Rarity="Item.Metadata.Rarity" />
    </div>

    @if (SupportsBulkRequest)
    {
        <MudButtonGroup Size="Size.Small" Variant="Variant.Filled" Color="Color.Info" Class="pt-2 px-2" Style="width: 100%;">
            <MudButton OnClick="() => SelectModeButton(TradeMode.Item)"
                       FullWidth="true"
                       Class="@GetModeButtonClass(TradeMode.Item)">
                @Resources.Mode_Item
            </MudButton>
            <MudButton OnClick="() => SelectModeButton(TradeMode.Bulk)"
                       FullWidth="true"
                       Class="@GetModeButtonClass(TradeMode.Bulk)">
                @Resources.Mode_Bulk
            </MudButton>
        </MudButtonGroup>
    }

    @if (HasAnyFilter || SupportsBulkRequest)
    {
        <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary" Class="pa-2" Style="width: 100%;">
            <MudButton FullWidth
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        OnClick="Search">@Resources.Filters_Submit</MudButton>
             <TradeCurrencySelect @bind-Value="Currency" />
         </MudButtonGroup>
    }
</MudDrawer>

@code {
    [Inject]
    private TradeResources Resources { get; set; }

    [Inject]
    private ISettings Settings { get; set; }

    [Inject]
    private ISettingsService SettingsService { get; set; }

    [CascadingParameter]
    public Item Item { get; set; }

    [CascadingParameter]
    public FiltersModel Filters { get; set; }

    [Parameter]
    public bool SupportsBulkRequest { get; set; }

    [Parameter]
    public string ItemName { get; set; }

    [Parameter]
    public EventCallback OnSearch { get; set; }

    private bool HasAnyFilter { get; set; }
    private bool IsInit { get; set; } = false;

    private TradeMode Mode { get; set; }

    private TradeCurrency Currency { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Mode = Settings.Trade_Currency_PreferredMode.GetEnumFromValue<TradeMode>();
        SetInitialCurrencyValue();

        if (IsInit) return;
        IsInit = Item != null;

        int propertyCount = 0;
        propertyCount += Filters.PropertyFilters?.Armour?.Count ?? 0;
        propertyCount += Filters.PropertyFilters?.Map?.Count ?? 0;
        propertyCount += Filters.PropertyFilters?.Misc?.Count ?? 0;
        propertyCount += Filters.PropertyFilters?.Weapon?.Count ?? 0;

        int modifierCount = 0;
        modifierCount += Filters.ModifierFilters?.Count ?? 0;

        HasAnyFilter = modifierCount + propertyCount > 0;
    }

    private void SetInitialCurrencyValue()
    {
        if (Mode == TradeMode.Bulk)
        {
            Currency = Settings.Trade_Bulk_Currency.GetEnumFromValue<TradeCurrency>();
        }
        else
        {
            Currency = Settings.Trade_Item_Currency.GetEnumFromValue<TradeCurrency>();
        }
    }

    private string GetModeButtonClass(TradeMode value)
    {
        if (Mode != value)
        {
            return "unselected";
        }

        return "";
    }

    private void SelectModeButton(TradeMode value)
    {
        Mode = value;
        SetInitialCurrencyValue();
    }

    private async Task Search()
    {
        if (SupportsBulkRequest)
        {
            await SettingsService.Save(nameof(ISettings.Trade_Currency_PreferredMode), Mode.GetValueAttribute());
        }

        if (Mode == TradeMode.Bulk)
        {
            await SettingsService.Save(nameof(ISettings.Trade_Bulk_Currency), Currency);
        }
        else
        {
            await SettingsService.Save(nameof(ISettings.Trade_Item_Currency), Currency);
        }

        await OnSearch.InvokeAsync();
    }
}
