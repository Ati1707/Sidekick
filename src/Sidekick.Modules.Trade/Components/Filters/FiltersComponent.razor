@* Root <div> element is required for ::deep CSS styles to be applied. *@
<MudDrawer Open="true"
           Variant="@DrawerVariant.Persistent"
           Width="22em"
           Class="black"
           ClipMode="DrawerClipMode.Always">
    <ItemHeaderComponent Name="@Item.Original.Name"
                         Type="@Item.Original.Type"
                         Rarity="Item.Metadata.Rarity"
                         Influences="Item.Influences"
                         IsRelic="Item.Properties.IsRelic" />

    <div class="flex-grow-1" style="overflow-y:auto;">
        @if (Item != null)
        {
            <PriceNinjaComponent Item="Item" ItemName="@ItemName" />
            <PricePredictionComponent Item="Item" />
        }

        <ClassFilter @bind-Value="PropertyFilters.Class" Item="Item" />

        <CascadingValue Value="PropertyFilters.Armour" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity" />
        </CascadingValue>

        <CascadingValue Value="PropertyFilters.Weapon" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity" />
        </CascadingValue>

        <CascadingValue Value="PropertyFilters.Map" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity" />
        </CascadingValue>

        <CascadingValue Value="PropertyFilters.Misc" IsFixed="true">
            <PropertyFiltersComponent Rarity="Item.Metadata.Rarity" />
        </CascadingValue>

        <ModifierFiltersComponent Filters="ModifierFilters"
                                  Rarity="Item.Metadata.Rarity" />

        <PseudoFiltersComponent Filters="PseudoFilters"
                                Rarity="Item.Metadata.Rarity" />
    </div>

    @if (FiltersVisible)
    {
        <div class="d-flex justify-center pa-2">
            <MudButton FullWidth
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        OnClick="Search">@Resources.Filters_Submit</MudButton>
         </div>
    }
</MudDrawer>

@code {
    [Inject] public TradeResources Resources { get; set; }

    [CascadingParameter]
    public Item Item { get; set; }

    [Parameter]
    public string ItemName { get; set; }

    [Parameter]
    public PropertyFilters PropertyFilters { get; set; }
    
    [Parameter]
    public List<ModifierFilter> ModifierFilters { get; set; }

    [Parameter]
    public List<PseudoModifierFilter> PseudoFilters { get; set; }

    [Parameter]
    public EventCallback OnSearch { get; set; }

    private bool Expanded { get; set; } = false;
    private bool FiltersVisible { get; set; }
    private bool IsInit { get; set; } = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (IsInit) return;
        IsInit = Item != null;

        int propertyCount = 0;
        propertyCount += PropertyFilters?.Armour?.Count ?? 0;
        propertyCount += PropertyFilters?.Map?.Count ?? 0;
        propertyCount += PropertyFilters?.Misc?.Count ?? 0;
        propertyCount += PropertyFilters?.Weapon?.Count ?? 0;

        int modifierCount = 0;
        modifierCount += ModifierFilters?.Count ?? 0;

        FiltersVisible = (ModifierFilters?.Count ?? 0) + propertyCount > 0;
    }

    private void Expand()
    {
        Expanded = true;
    }

    private void Collapse()
    {
        Expanded = false;
    }

    private Task Search()
    {
        Expanded = false;
        return OnSearch.InvokeAsync();
    }
}
