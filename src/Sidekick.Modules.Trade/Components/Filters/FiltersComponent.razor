@* Root <div> element is required for ::deep CSS styles to be applied. *@
<MudDrawer Open="true"
           Variant="@DrawerVariant.Persistent"
           Width="22em"
           Class="black"
           ClipMode="DrawerClipMode.Always">
    <ItemHeaderComponent Name="@Item.Original.Name"
                         Type="@Item.Original.Type"
                         Rarity="Item.Metadata.Rarity"
                         Influences="Item.Influences"
                         IsRelic="Item.Properties.IsRelic" />

    <ClassFilter @bind-Value="PropertyFilters.Class" Item="Item" />

    <PropertyFiltersComponent Filters="PropertyFilters.Armour"
                              Rarity="Item.Metadata.Rarity" />
    <PropertyFiltersComponent Filters="PropertyFilters.Weapon"
                              Rarity="Item.Metadata.Rarity" />
    <PropertyFiltersComponent Filters="PropertyFilters.Map"
                              Rarity="Item.Metadata.Rarity" />
    <PropertyFiltersComponent Filters="PropertyFilters.Misc"
                              Rarity="Item.Metadata.Rarity" />

    <ModifierFiltersComponent Filters="ModifierFilters"
                              Rarity="Item.Metadata.Rarity" />

    <div class="d-flex justify-center pa-2">
        <MudButton FullWidth
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="Search">@Resources.Filters_Submit</MudButton>
    </div>
</MudDrawer>

@code {
    [Inject] public TradeResources Resources { get; set; }

    [Parameter] public Item Item { get; set; }
    [Parameter] public PropertyFilters PropertyFilters { get; set; }
    [Parameter] public List<ModifierFilter> ModifierFilters { get; set; }
    [Parameter] public EventCallback OnSearch { get; set; }

    private bool Expanded { get; set; } = false;
    private bool Visible { get; set; }
    private bool IsInit { get; set; } = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (IsInit) return;
        IsInit = Item != null;
    }

    private void Expand()
    {
        Expanded = true;
    }

    private void Collapse()
    {
        Expanded = false;
    }

    private Task Search()
    {
        Expanded = false;
        return OnSearch.InvokeAsync();
    }
}
