
@if (Visible)
{
    <MudSelect T="string"
               Label="@Resources.Class"
               Variant="Variant.Filled"
               Value="Value"
               ValueChanged="ValueChanged"
               OffsetY="true">
        @foreach (var option in Options)
        {
            <MudSelectItem Value="@option.Key">@option.Value</MudSelectItem>
        }
    </MudSelect>
}

@code {
    [Inject] private TradeResources Resources { get; set; }

    [Parameter] public Item Item { get; set; }
    [Parameter] public string Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    private bool Visible => (Item?.Metadata.Rarity == Rarity.Rare || Item?.Metadata.Rarity == Rarity.Magic || Item?.Metadata.Rarity == Rarity.Normal) && Options.Count > 2;
    private Dictionary<string, string> Options { get; set; } = new Dictionary<string, string>();

    protected override async Task OnParametersSetAsync()
    {
        if (Item == null)
        {
            return;
        }

        Options.Clear();
        Options.Add(null, Item.Original.Type);
        if (Item.Metadata.Category == Category.Weapon)
        {
            Options.Add("weapon", Resources.Class_Weapon);
            Options.Add("weapon.one", Resources.Class_WeaponOne);
            Options.Add("weapon.onemelee", Resources.Class_WeaponOneMelee);
            Options.Add("weapon.twomelee", Resources.Class_WeaponTwoMelee);
            Options.Add("weapon.bow", Resources.Class_WeaponBow);
            Options.Add("weapon.claw", Resources.Class_WeaponClaw);
            Options.Add("weapon.dagger", Resources.Class_WeaponDagger);
            Options.Add("weapon.runedagger", Resources.Class_WeaponRuneDagger);
            Options.Add("weapon.oneaxe", Resources.Class_WeaponOneAxe);
            Options.Add("weapon.onemace", Resources.Class_WeaponOneMace);
            Options.Add("weapon.onesword", Resources.Class_WeaponOneSword);
            Options.Add("weapon.sceptre", Resources.Class_WeaponSceptre);
            Options.Add("weapon.staff", Resources.Class_WeaponStaff);
            Options.Add("weapon.warstaff", Resources.Class_WeaponWarstaff);
            Options.Add("weapon.twoaxe", Resources.Class_WeaponTwoAxe);
            Options.Add("weapon.twomace", Resources.Class_WeaponTwoMace);
            Options.Add("weapon.twosword", Resources.Class_WeaponTwoSword);
            Options.Add("weapon.wand", Resources.Class_WeaponWand);
            Options.Add("weapon.rod", Resources.Class_WeaponRod);
        }

        if (Item.Metadata.Category == Category.Armour)
        {
            Options.Add("armour", Resources.Class_Armour);
            Options.Add("armour.chest", Resources.Class_ArmourChest);
            Options.Add("armour.boots", Resources.Class_ArmourBoots);
            Options.Add("armour.gloves", Resources.Class_ArmourGloves);
            Options.Add("armour.helmet", Resources.Class_ArmourHelmet);
            Options.Add("armour.shield", Resources.Class_ArmourShield);
            Options.Add("armour.quiver", Resources.Class_ArmourQuiver);
        }

        if (Item.Metadata.Category == Category.Accessory)
        {
            Options.Add("accessory", Resources.Class_Accessory);
            Options.Add("accessory.amulet", Resources.Class_AccessoryAmulet);
            Options.Add("accessory.belt", Resources.Class_AccessoryBelt);
            Options.Add("accessory.ring", Resources.Class_AccessoryRing);
        }

        if (Item.Metadata.Category == Category.Gem)
        {
            Options.Add("gem", Resources.Class_Gem);
            Options.Add("gem.activegem", Resources.Class_GemActive);
            Options.Add("gem.supportgem", Resources.Class_GemSupport);
            Options.Add("gem.supportgemplus", Resources.Class_GemAwakenedSupport);
        }

        if (Item.Metadata.Category == Category.Jewel)
        {
            Options.Add("jewel", Resources.Class_Jewel);
            Options.Add("jewel.base", Resources.Class_JewelBase);
            Options.Add("jewel.abyss", Resources.Class_JewelAbyss);
            Options.Add("jewel.cluster", Resources.Class_JewelCluster);
        }

        if (Item.Metadata.Category == Category.Flask)
        {
            Options.Add("flask", Resources.Class_Flask);
        }

        if (Item.Metadata.Category == Category.Map)
        {
            Options.Add("map", Resources.Class_Map);
            Options.Add("map.fragment", Resources.Class_MapFragment);
            Options.Add("map.scarab", Resources.Class_MapScarab);
        }

        if (Item.Metadata.Category == Category.Watchstone)
        {
            Options.Add("watchstone", Resources.Class_Watchstone);
        }

        if (Item.Metadata.Category == Category.Leaguestone)
        {
            Options.Add("leaguestone", Resources.Class_Leaguestone);
        }

        if (Item.Metadata.Category == Category.Prophecy)
        {
            Options.Add("prophecy", Resources.Class_Prophecy);
        }

        if (Item.Metadata.Category == Category.DivinationCard)
        {
            Options.Add("card", Resources.Class_Card);
        }

        if (Item.Metadata.Category == Category.ItemisedMonster)
        {
            Options.Add("monster.beast", Resources.Class_MonsterBeast);
            Options.Add("monster.sample", Resources.Class_MonsterSample);
        }

        if (Item.Metadata.Category == Category.Currency)
        {
            Options.Add("currency", Resources.Class_Currency);
            Options.Add("currency.piece", Resources.Class_CurrencyPiece);
            Options.Add("currency.resonator", Resources.Class_CurrencyResonator);
            Options.Add("currency.fossil", Resources.Class_CurrencyFossil);
            Options.Add("currency.incubator", Resources.Class_CurrencyIncubator);
        }

        await base.OnParametersSetAsync();
    }

    private void SetCategory(string category)
    {

    }
}
