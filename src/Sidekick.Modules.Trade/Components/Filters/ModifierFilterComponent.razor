
<div class="d-flex filter">
    <div class="flex-grow-1">
        <MudCheckBox @bind-Checked="Filter.Enabled"
                     Color="Color.Primary"
                     Dense="true"
                     Size="Size.Small">
            <div class="d-flex align-center">
                @if (Filter.Line.Modifier.Category == ModifierCategory.Pseudo)
                {
                    <ItemModifierCategoryChip Category="Filter.Line.Modifier.Category" />
                }
                <ItemModifierText Text="@Filter.Line.Text"
                                  Category="Filter.Line.Modifier?.Category" />

            </div>
        </MudCheckBox>
    </div>

    @if (EnchantmentOilNames?.Any() == true)
    {
        <OilAnointment OilNames="EnchantmentOilNames" />
    }

    @if ((Filter.Enabled ?? false) && HasModifierValues)
    {
        <FilterRange @bind-Min="@Filter.Min" @bind-Max="@Filter.Max" OnChanged="StateHasChanged" />
    }

    @if ((Filter.Enabled ?? false) && HasAlternateModifiers)
    {
        <MudMenu Color="Color.Info">
            <ActivatorContent>
                <Hint Text="@Resources.ModifierHint">
                    <MudIconButton Variant="Variant.Text" Color="Color.Info" Icon="@Icons.Material.Filled.SwapHorizontalCircle" Class="pa-0" />
                </Hint>
            </ActivatorContent>
            <ChildContent>
                @foreach (var alternate in Filter.Line.Alternates)
                {
                    <MudMenuItem OnClick="() => SelectAlternate(alternate)" Class="d-flex align-center">
                        <ItemModifierCategoryChip Category="alternate.Category" />
                        <MudText Typo="Typo.caption">@alternate.Text</MudText>
                    </MudMenuItem>
                }
            </ChildContent>
        </MudMenu>
    }
</div>

@code {
    [Inject] public TradeResources Resources { get; set; }
    [Inject] private IPoeWikiClient PoeWikiClient { get; set; }
    [Inject] private IPoeWikiDataProvider PoeWikiDataProvider { get; set; }

    [Parameter] public ModifierFilter Filter { get; set; }

    private List<string> EnchantmentOilNames { get; set; }

    private bool HasAlternateModifiers => Filter.Line.Alternates.Count > 0;

    private bool HasModifierValues => Filter.Line.Modifier?.OptionValue == null && Filter.Line.Modifier?.Values.Count > 0;

    protected override async Task OnInitializedAsync()
    {
        if (Filter.Line.Modifier.Category == ModifierCategory.Enchant && PoeWikiClient.IsEnabled)
        {
            var oilMetadataIds = await PoeWikiClient.GetOilsMetadataIdsFromEnchantment(Filter.Line);
            if (oilMetadataIds != null)
            {
                EnchantmentOilNames = oilMetadataIds.Select(x => PoeWikiDataProvider.BlightOilNamesByMetadataIds[x]).ToList();
            }
        }
    }

    private void SelectAlternate(Modifier newValue)
    {
        Filter.Line.Alternates.Add(Filter.Line.Modifier);
        Filter.Line.Alternates.Remove(newValue);
        Filter.Line.Modifier = newValue;
    }
}
