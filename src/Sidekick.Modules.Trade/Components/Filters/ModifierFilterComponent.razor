<div class="filter">
    <div class="d-flex align-center">
        <div class="flex-grow-1">
            <MudCheckBox @bind-Checked="Filter.Enabled"
                         Color="Color.Primary"
                         Dense="true"
                         Size="Size.Small">
                <div class="d-flex align-center">
                    @if (Filter.Line.Modifier.Category == ModifierCategory.Pseudo)
                    {
                        <ItemModifierCategoryChip Category="Filter.Line.Modifier.Category" />
                    }
                    <ItemModifierText Text="@Filter.Line.Text"
                                      Category="Filter.Line.Modifier?.Category" />

                </div>
            </MudCheckBox>
        </div>

        @if (Filter.Enabled == true && Filter.Line.Modifier.HasValue)
        {
            <FilterRange @bind-Min="Filter.Min" @bind-Max="Filter.Max" TypeChanged="TypeChanged" />
        }

        @if (EnchantmentOilNames?.Any() == true)
        {
            <OilAnointment OilNames="EnchantmentOilNames" />
        }

        @if (Filter.Enabled == true && Filter.Line.Alternates.Any())
        {
            <MudMenu Color="Color.Info"
                     AnchorOrigin="Origin.CenterRight"
                     TransformOrigin="Origin.CenterLeft"
                     MaxHeight="200"
                     Dense="true">
                <ActivatorContent>
                    <Hint Text="@Resources.ModifierHint">
                        @*<ItemModifierCategoryChip Category="Filter.Line.Modifier.Category" Arrow="true" />*@
                        <MudIconButton Color="Color.Info"
                                       Icon="@Icons.Material.Filled.SwapHorizontalCircle"
                                       Size="Size.Small"
                                       Class="pa-0" />
                    </Hint>
                </ActivatorContent>
                <ChildContent>
                    @foreach (var alternate in Filter.Line.Alternates)
                    {
                        <MudMenuItem OnClick="() => SelectAlternate(alternate)" Class="d-flex align-center">
                            <ItemModifierCategoryChip Category="alternate.Category" />
                            <MudText Typo="Typo.caption">@alternate.Text</MudText>
                        </MudMenuItem>
                    }
                </ChildContent>
            </MudMenu>
        }
    </div>
</div>

@code {
    [Inject]
    public TradeResources Resources { get; set; }

    [Inject]
    private IPoeWikiClient PoeWikiClient { get; set; }

    [Parameter]
    public ModifierFilter Filter { get; set; }

    private List<string> EnchantmentOilNames { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Filter.Line.Modifier.Category == ModifierCategory.Enchant && PoeWikiClient.IsEnabled)
        {
            var oilMetadataIds = await PoeWikiClient.GetOilsMetadataIdsFromEnchantment(Filter.Line);
            if (oilMetadataIds != null)
            {
                EnchantmentOilNames = oilMetadataIds.Select(x => PoeWikiClient.BlightOilNamesByMetadataIds[x]).ToList();
            }
        }
    }

    private void SelectAlternate(Modifier newValue)
    {
        Filter.Line.Alternates.Add(Filter.Line.Modifier);
        Filter.Line.Alternates.Remove(newValue);
        Filter.Line.Modifier = newValue;
    }

    private void TypeChanged(FilterRange.RangeType type)
    {
        switch (type)
        {
            case FilterRange.RangeType.Minimum:
                Filter.NormalizeMinValue();
                Filter.Max = null;
                break;
            case FilterRange.RangeType.Maximum:
                Filter.NormalizeMaxValue();
                Filter.Min = null;
                break;
            case FilterRange.RangeType.Equals:
                Filter.SetExactValue();
                break;
            case FilterRange.RangeType.Range:
                Filter.NormalizeMinValue();
                Filter.NormalizeMaxValue();
                break;
        }
    }
}
