@using Microsoft.AspNetCore.Components.Web;
@using Sidekick.Modules.Trade.Localization;

<div class="d-flex flex-nowrap align-center">
    <MudIconButton Color="Color.Primary"
                   OnClick="ToggleType"
                   Class="pa-1 filter-swap"
                   Variant="Variant.Text"
                   Icon="@Icon" />

    <div>
        @if (Type == RangeType.Minimum || Type == RangeType.Equals || Type == RangeType.Range)
        {
            <div class="filter-value" @onwheel="OnMinWheel" @onwheel:preventDefault @oncontextmenu="Clear">
                <MudTextField T="double?"
                              Value="Min"
                              ValueChanged="UpdateMinValue"
                              Placeholder="@Placeholder"
                              Variant="Variant.Text"
                              Margin="Margin.Dense" />
            </div>
        }

        @if (Type == RangeType.Maximum || Type == RangeType.Range)
        {
            <div class="filter-value" @onwheel="OnMaxWheel" @onwheel:preventDefault @oncontextmenu="Clear">
                <MudTextField T="double?"
                              Value="Max"
                              ValueChanged="UpdateMaxValue"
                              Placeholder="@Placeholder"
                              Variant="Variant.Text"
                              Margin="Margin.Dense" />
            </div>
        }
    </div>
</div>

@code {
    public enum RangeType
    {
        Minimum,
        Maximum,
        Equals,
        Range,
    }

    [Inject]
    private TradeResources Resources { get; set; }

    [Parameter]
    public double? Min { get; set; }

    [Parameter]
    public EventCallback<double?> MinChanged { get; set; }

    [Parameter]
    public double? Max { get; set; }

    [Parameter]
    public EventCallback<double?> MaxChanged { get; set; }

    [Parameter]
    public EventCallback<RangeType> TypeChanged { get; set; }

    private RangeType Type { get; set; } = RangeType.Minimum;

    private string Icon => Type switch
    {
        RangeType.Maximum => @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><title>less-than-or-equal</title><path d=""M18.5,2.27L5,10.14L18.5,18L19.5,16.27L8.97,10.14L19.5,4L18.5,2.27M5,20V22H20V20H5Z"" /></svg>",
        RangeType.Equals => @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><title>equal</title><path d=""M19,10H5V8H19V10M19,16H5V14H19V16Z"" /></svg>",
        RangeType.Range => @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><title>code-braces</title><path d=""M8,3A2,2 0 0,0 6,5V9A2,2 0 0,1 4,11H3V13H4A2,2 0 0,1 6,15V19A2,2 0 0,0 8,21H10V19H8V14A2,2 0 0,0 6,12A2,2 0 0,0 8,10V5H10V3M16,3A2,2 0 0,1 18,5V9A2,2 0 0,0 20,11H21V13H20A2,2 0 0,0 18,15V19A2,2 0 0,1 16,21H14V19H16V14A2,2 0 0,1 18,12A2,2 0 0,1 16,10V5H14V3H16Z"" /></svg>",
        _ => @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><title>greater-than-or-equal</title><path d=""M6.5,2.27L20,10.14L6.5,18L5.5,16.27L16.03,10.14L5.5,4L6.5,2.27M20,20V22H5V20H20Z"" /></svg>",
    };

    private string Placeholder => Type switch
    {
        RangeType.Maximum => Resources.Filters_Max,
        RangeType.Equals => Resources.Filters_Equals,
        _ => Resources.Filters_Min,
    };

    private bool IsChanging { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (IsChanging)
        {
            return;
        }

        if (Min != null && Min == Max)
        {
            Type = RangeType.Equals;
        }
        else if (Min != null && Max != null)
        {
            Type = RangeType.Range;
        }
        else if (Max != null)
        {
            Type = RangeType.Maximum;
        }
        else if (Min != null)
        {
            Type = RangeType.Minimum;
        }
    }

    private async Task ToggleType(MouseEventArgs args)
    {
        switch (Type)
        {
            case RangeType.Minimum:
                Type = RangeType.Maximum;
                break;
            case RangeType.Maximum:
                Type = RangeType.Equals;
                break;
            case RangeType.Equals:
                Type = RangeType.Range;
                break;
            case RangeType.Range:
                Type = RangeType.Minimum;
                break;
        }

        await TypeChanged.InvokeAsync(Type);
    }

    private async Task UpdateMinValue(double? value)
    {
        IsChanging = true;

        await MinChanged.InvokeAsync(value);
        if (Type == RangeType.Equals)
        {
            await MaxChanged.InvokeAsync(value);
        }

        IsChanging = false;
    }

    private async Task UpdateMaxValue(double? value)
    {
        IsChanging = true;

        await MaxChanged.InvokeAsync(value);

        IsChanging = false;
    }

    private async Task OnMinWheel(WheelEventArgs args)
    {
        var value = Min ?? 0;
        if (args.DeltaY < 0)
        {
            value = value + 1;
        }
        else
        {
            value = value - 1;
        }

        await UpdateMinValue(value);
    }

    private async Task OnMaxWheel(WheelEventArgs args)
    {
        var value = Max ?? 0;
        if (args.DeltaY < 0)
        {
            value = value + 1;
        }
        else
        {
            value = value - 1;
        }

        await UpdateMaxValue(value);
    }

    private async Task Clear()
    {
        await MinChanged.InvokeAsync(null);
        await MaxChanged.InvokeAsync(null);
    }
}
