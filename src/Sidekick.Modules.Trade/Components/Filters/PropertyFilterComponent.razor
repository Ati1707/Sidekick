
<div class="d-flex filter">
    <div class="flex-grow-1">
        <MudCheckBox @bind-Checked="Filter.Enabled"
                     Color="Color.Primary"
                     Dense="true"
                     Size="Size.Small"
                     TriState="Filter.ValueType == FilterValueType.Boolean">
            <div class="d-flex align-center">
                <ItemPropertyText Label="@Filter.Text"
                                  Value="Filter.Value"
                                  OnlyShowLabel="Filter.ValueType == FilterValueType.Boolean" />
            </div>
        </MudCheckBox>
    </div>

    @if (Filter.Enabled == true && HasValueFilters)
    {
        <MudButton Size="Size.Small"
                   EndIcon="@(Opened ? Icons.Material.Filled.ChevronLeft : Icons.Material.Filled.ChevronRight)"
                   Color="Color.Primary"
                   OnClick="() => Opened = !Opened">
            <FilterRangeText Min="@Filter.Min.ToString()"
                             Max="@Filter.Max.ToString()" />
        </MudButton>

        <MudPopover Open="Opened" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft">
            <div class="pa-1 d-flex align-center justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.SwapHoriz"
                               OnClick="SwapValues"
                               Size="Size.Small"
                               Class="mr-1" />
                <div class="filter-min" @onwheel="OnWheelMin" @onwheel:preventDefault @oncontextmenu="ClearMin">
                    <MudTextField @bind-Value="Filter.Min"
                                  Label="@Resources.Filters_Min"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense" />
                </div>
                <div class="filter-max" @onwheel="OnWheelMax" @onwheel:preventDefault @oncontextmenu="ClearMax">
                    <MudTextField @bind-Value="Filter.Max"
                                  Label="@Resources.Filters_Max"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense" />
                </div>
            </div>
        </MudPopover>
        <MudOverlay Visible="Opened" DarkBackground="true" OnClick="() => Opened = false" />
    }
</div>

@code {
    [Inject] public TradeResources Resources { get; set; }

    [Parameter] public PropertyFilter Filter { get; set; }

    private bool Opened { get; set; }

    private bool HasValueFilters => Filter.ValueType == FilterValueType.Double || Filter.ValueType == FilterValueType.Int;

    private void SwapValues(MouseEventArgs args)
    {
        (Filter.Min, Filter.Max) = (Filter.Max, Filter.Min);
    }

    private void OnWheelMin(WheelEventArgs args)
    {
        if (!Filter.Min.HasValue) Filter.Min = 0;
        if (args.DeltaY < 0) Filter.Min += 1;
        else Filter.Min -= 1;
    }

    private void ClearMin()
    {
        Filter.Min = null;
    }

    private void OnWheelMax(WheelEventArgs args)
    {
        if (!Filter.Max.HasValue) Filter.Max = 0;
        if (args.DeltaY < 0) Filter.Max += 1;
        else Filter.Max -= 1;
    }

    private void ClearMax()
    {
        Filter.Max = null;
    }
}
