@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Common.Game.Items
@using Sidekick.Common.Ui.Forms

<FilterWrapper>
    <div class="flex flex-nowrap items-center w-full">
        <div class="grow min-w-0">
            @if (Filter.ValueType == FilterValueType.Boolean)
            {
                <FormTriStateCheckbox @bind-Value="Filter.Enabled"
                                    NoMargin="true">
                    <ItemPropertyText Label="@Filter.Text"
                                    Value="@Filter.Value?.ToString()"
                                    OnlyShowLabel="true" />
                </FormTriStateCheckbox>
            }
            else
            {
                <FormCheckbox Value="Filter.Enabled ?? false"
                             NoMargin="true"
                             ValueChanged="(v) => Filter.Enabled = v">
                    <ItemPropertyText Label="@Filter.Text"
                                    Value="@GetDisplayValue()" />
                </FormCheckbox>
            }
        </div>

        @if ((Filter.Enabled ?? false) && HasValueFilters)
        {
            <div class="ml-4">
                <FilterRange @bind-Min="Filter.Min" 
                            @bind-Max="Filter.Max" 
                            TypeChanged="TypeChanged" />
            </div>
        }
    </div>
</FilterWrapper>

@code {
    [Parameter]
    public required PropertyFilter Filter { get; set; }

    private bool HasValueFilters => Filter.ValueType is FilterValueType.Double or FilterValueType.Int;

    private void TypeChanged(FilterRange.RangeType type)
    {
        switch (type)
        {
            case FilterRange.RangeType.Minimum:
                Filter.NormalizeMinValue();
                Filter.Max = null;
                break;

            case FilterRange.RangeType.Maximum:
                Filter.NormalizeMaxValue();
                Filter.Min = null;
                break;

            case FilterRange.RangeType.Equals:
                Filter.SetExactValue();
                break;

            case FilterRange.RangeType.Range:
                Filter.NormalizeMinValue();
                Filter.NormalizeMaxValue();
                break;
        }
    }

    private string GetDisplayValue()
    {
        if (Filter.Value is DamageRange range)
        {
            return range.ToDisplayString();
        }
        return Filter.Value?.ToString() ?? string.Empty;
    }
}
