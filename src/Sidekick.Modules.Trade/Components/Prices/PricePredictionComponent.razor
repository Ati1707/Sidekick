@using System.Threading
@implements IDisposable

@if (Settings.Trade_Prediction_Enable ?? false)
{
    return;
}

@if (Loading)
{
    <MudSkeleton Height="56px"/>
    <ItemSeparator Rarity="Item.Metadata.Rarity"/>
}
else if (Prediction != null && (Prediction.Min != 0 || Prediction.Max != 0))
{
    <MudGrid Spacing="0" Justify="Justify.Center" Class="align-start py-2">
        <MudItem xs="6" Class="pr-2">
            <MudText Typo="Typo.subtitle2" Align="Align.Right">@Resources.Prediction</MudText>
            <MudText Typo="Typo.caption" Align="Align.Right" Style="@($"color: {GetConfidenceColor()};")" Class="d-block">@Resources.PredictionConfidence(Prediction.ConfidenceScore)</MudText>
        </MudItem>
        <MudItem xs="6" Class="pl-2">
            <PriceRangeDisplay Min="Prediction.Min" Max="Prediction.Max" Currency="@Prediction.Currency" Class="justify-start"/>
        </MudItem>
    </MudGrid>
    <ItemSeparator Rarity="Item.Metadata.Rarity"/>
}

@inject TradeResources Resources
@inject ISettings Settings
@inject IPoePriceInfoClient Client

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    private bool Loading { get; set; }

    private bool IsInit { get; set; }

    private PricePrediction? Prediction { get; set; }

    private CancellationTokenSource pricePredictionCancellationTokenSource = new();

    private string GetConfidenceColor()
    {
        return Prediction?.ConfidenceScore switch
        {
            (< 33) => Colors.Red.Default,
            (< 66) => Colors.Yellow.Default,
            _ => Colors.Green.Default
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (IsInit || !(Settings.Trade_Prediction_Enable ?? false)) return;

        Loading = true;

        IsInit = true;
        Prediction = await Client.GetPricePrediction(Item);

        Loading = false;
    }

    public void Dispose()
    {
        pricePredictionCancellationTokenSource.Cancel();
    }

}
