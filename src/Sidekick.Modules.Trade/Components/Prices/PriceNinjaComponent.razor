@using MudBlazor
@using Sidekick.Apis.PoeNinja
@using Sidekick.Apis.PoeNinja.Models
@using Sidekick.Common.Browser
@using Sidekick.Common.Game.Items
@using Sidekick.Common.Game.Items.AdditionalInformation;
@using Sidekick.Modules.Trade.Localization
@if (Loading)
{
    <MudSkeleton Height="64px"/>
    <ItemSeparator Rarity="Item.Metadata.Rarity"/>
}
else if (Price != null)
{
    <MudGrid Spacing="0" Justify="Justify.Center" Class="align-start py-2">
        <MudItem xs="6" Class="pr-2">
            <MudText Typo="Typo.subtitle1" Align="Align.Right">@Resources.PoeNinja</MudText>
            <MudText Typo="Typo.caption" Align="Align.Right" Class="d-block">
                <MudTooltip Text="@Resources.LastUpdated">@Price.LastUpdated.ToString("g")</MudTooltip>
            </MudText>
            <MudText Align="Align.Right">
                <MudButton Variant="Variant.Text"
                           OnClick="OpenWebsite"
                           Class="pa-0"
                           Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.OpenInBrowser">
                    @Resources.OpenInWebsite
                </MudButton>
            </MudText>
        </MudItem>
        <MudItem xs="6" Class="pl-2">
            <div class="d-flex flex-row">
                @if (Price.Links >= 5)
                {
                    <MudText Typo="Typo.caption" Color="Color.Tertiary" Class="d-flex mr-4 align-self-center">@Price.Links @Resources.Links</MudText>
                }
                <PriceDisplay Value="Price.Price" Class="justify-start mr-4"/>
            </div>

            @if (Series != null)
            {
                <div>
                    <MudChart ChartType="ChartType.Line" ChartOptions="@ChartOptions" ChartSeries="@Series"/>
                </div>
            }
        </MudItem>
    </MudGrid>

    <ItemSeparator Rarity="Item.Metadata.Rarity"/>
}

@inject PoeNinjaResources Resources
@inject IPoeNinjaClient Client
@inject IBrowserProvider BrowserProvider

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    private bool Loading { get; set; }

    private NinjaPrice? Price { get; set; }

    private ChartOptions? ChartOptions { get; set; }

    private List<ChartSeries>? Series { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        Loading = true;
        StateHasChanged();

        if (Item.AdditionalInformation is ClusterJewelInformation clusterJewelInformation)
        {
            Price = await Client.GetClusterPrice(clusterJewelInformation.GrantText, clusterJewelInformation.SmallPassiveCount, Item.Properties.ItemLevel);
        }
        else
        {
            Price = await Client.GetPriceInfo(
                Item.Invariant?.Name,
                Item.Invariant?.Type,
                Item.Metadata.Category,
                gemLevel: Item.Properties.GemLevel,
                mapTier: Item.Properties.MapTier,
                numberOfLinks: Item.GetMaximumNumberOfLinks());
        }

        ChartOptions = new ChartOptions()
        {
            DisableLegend = true,
            XAxisLines = false,
            YAxisLines = false,
            ChartPalette = new string[] { "#ffffff" },
        };

        if (Price?.SparkLine?.Data.All(x => x.HasValue) == true)
        {
            // Normalize values above 0 since the chart doesn't show negative values in the viewbox.
            var sparkLineData = Price
                                .SparkLine.Data.Select(x => x ?? 0)
                                .ToArray();
            var min = Math.Abs(sparkLineData.Min());
            var chartData = sparkLineData
                            .Select(x => x + min)
                            .ToArray();

            if (chartData.Any(x => x != 0))
            {
                Series =
                [
                    new ChartSeries() { Data = chartData },
                ];
            }
        }

        Loading = false;
        StateHasChanged();
    }

    private async Task OpenWebsite()
    {
        if (Price == null)
        {
            return;
        }

        var uri = await Client.GetDetailsUri(Price);
        BrowserProvider.OpenUri(uri);
    }

}
