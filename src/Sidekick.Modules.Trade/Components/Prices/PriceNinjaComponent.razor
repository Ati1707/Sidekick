@using Sidekick.Apis.PoeNinja
@using Sidekick.Apis.PoeNinja.Api
@using Sidekick.Apis.PoeNinja.Models
@using Sidekick.Common.Browser
@using Sidekick.Common.Game.Items
@using Sidekick.Common.Game.Items.AdditionalInformation;
@using Sidekick.Modules.Trade.Localization
@using ApexCharts

@if (Loading)
{
    <AppLoading />
}
else if (Price != null)
{
    <div class="flex flex-nowrap items-center pt-2">
        <div class="text-right w-1/2 pr-2">
            <Heading3>@Resources["Poe.Ninja"]</Heading3>
            <TooltipTopRight>
                <ChildContent>
                    <TextCaption>@Price.LastUpdated.ToString("g")</TextCaption>
                </ChildContent>
                <TooltipContent>
                    @Resources["Last Updated"]
                </TooltipContent>
            </TooltipTopRight>
            <ButtonLink OnClick="OpenWebsite">
                <TextCaption>@Resources["Open Website"]</TextCaption>
            </ButtonLink>
        </div>
        <div class="text-left w-1/2 pl-2">
            <div class="flex">
                <PriceDisplay Value="Price.Price" />
            </div>

            @if (Price.Links >= 5)
            {
                <TextCaption>@Price.Links @Resources["Links"]</TextCaption>
            }
        </div>

    </div>

    @if (Series != null)
    {
        <div class="py-2">
            <ApexChart TItem="DataPoint" Options="options">
                <ApexPointSeries TItem="DataPoint"
                                 Items="Series"
                                 XValue="(x => x.Index)"
                                 YValue="(x => x.Value)"
                                 SeriesType="SeriesType.Line" />
            </ApexChart>
        </div>
    }

    <ItemSeparator Rarity="PriceCheckService.Item?.Metadata.Rarity ?? Rarity.Unknown" />
}

@inject IStringLocalizer<TradeResources> Resources
@inject IPoeNinjaClient Client
@inject IBrowserProvider BrowserProvider
@inject PriceCheckService PriceCheckService

@code {

    private bool Loading { get; set; }

    private NinjaPrice? Price { get; set; }

    private List<DataPoint> Series { get; set; }
    private ApexChartOptions<DataPoint> options { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        Loading = true;
        StateHasChanged();

        if (PriceCheckService.Item?.AdditionalInformation is ClusterJewelInformation clusterJewelInformation)
        {
            Price = await Client.GetClusterPrice(clusterJewelInformation.GrantText, clusterJewelInformation.SmallPassiveCount, PriceCheckService.Item.Properties.ItemLevel);
        }
        else
        {
            Price = await Client.GetPriceInfo(
                PriceCheckService.Item?.Invariant?.Name,
                PriceCheckService.Item?.Invariant?.Type,
                PriceCheckService.Item?.Metadata.Category ?? Category.Unknown,
                gemLevel: PriceCheckService.Item?.Properties.GemLevel,
                mapTier: PriceCheckService.Item?.Properties.MapTier,
                numberOfLinks: PriceCheckService.Item?.GetMaximumNumberOfLinks());
        }

        if (Price?.SparkLine?.Data.All(x => x.HasValue) == true)
        {
            Series = Price.SparkLine.Data.Select((value, index) => new DataPoint { Index = index, Value = (decimal?)value }).ToList();
            options = new();
            options.PlotOptions = new() { Line = new() { IsSlopeChart = true } };
            options.Tooltip = new() { Enabled = false };
            options.Chart.Sparkline = new() { Enabled = true };
            options.Markers = new() { Size = 0 };
            options.Chart.Height = 40;
            options.Stroke = new() { Curve = Curve.Smooth, Width = 2, Colors = new() { "#8888ff" } };
        }

        Loading = false;
        StateHasChanged();
    }

    class DataPoint
    {
        public int Index { get; set; }
        public decimal? Value { get; set; }
    }

    private async Task OpenWebsite()
    {
        if (Price == null)
        {
            return;
        }

        var uri = await Client.GetDetailsUri(Price);
        BrowserProvider.OpenUri(uri);
    }
}
