@using Sidekick.Apis.Poe
@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Apis.Poe.Trade.Results;
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Components.Filters
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Game.Items
@using MudBlazor

@if (PriceCheckService.Mode != TradeMode.Item)
{
return;
}

@if (Visible)
{
    <ItemsOptions @bind-Layout="Layout"
                  QueryId="@QueryResult?.Id"
                  Count="Results?.Count ?? 0"
                  Total="QueryResult?.Total ?? 0"/>

    @if (Results != null)
    {
        foreach (var result in Results)
        {
            <ItemComponent @key="result.Id" Item="result" Layout="Layout"/>
        }
    }

    @if (IsFetching)
    {
        <LoadingAlert Text="Loading results"/>
    }
    else if (!FullyLoaded && Results != null)
    {
        <MudButton Variant="Variant.Outlined" Color="Color.Info" FullWidth="true" OnClick="LoadMoreData" Class="mt-2">@Resources.LoadMoreData</MudButton>
    }
}

@inject  TradeResources Resources
@inject  ITradeSearchService TradeSearchService
@inject  ISettingsService SettingsService
@inject  NavigationManager NavigationManager
@inject  ITradeFilterService TradeFilterService
@inject PriceCheckService PriceCheckService

@code {

    [Parameter]
    public bool Visible { get; set; }

    private TradeSearchResult<string>? QueryResult { get; set; }

    private List<TradeItem>? Results { get; set; }

    private bool FullyLoaded => (Results?.Count ?? 0) == (QueryResult?.Result?.Count ?? 0);

    private Layout Layout { get; set; }

    private void LayoutChanged(Layout layout)
    {
        Layout = layout;
        StateHasChanged();
    }

}
