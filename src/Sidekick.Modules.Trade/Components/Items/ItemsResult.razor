@using Sidekick.Apis.Poe.Bulk;
@using Sidekick.Apis.Poe.Trade.Results;
@using Sidekick.Common.Enums;

@if (Visible)
{
    <ItemsOptions @bind-Layout="Layout"
                  QueryId="@QueryResult?.Id"
                  Count="Results?.Count ?? 0"
                  Total="QueryResult?.Total ?? 0" />

    @if (Results != null)
    {
        foreach (var result in Results)
        {
            <ItemComponent @key="result.Id" Item="result" Layout="Layout" />
        }
    }

    @if (IsFetching)
    {
        <LoadingAlert Text="Loading results" />
    }
    else if (!FullyLoaded && Results != null)
    {
        <MudButton Variant="Variant.Outlined" Color="Color.Info" FullWidth="true" OnClick="LoadMoreData" Class="mt-2">@Resources.LoadMoreData</MudButton>
    }
}

@code {
    [Inject]
    private ITradeSearchService TradeSearchService { get; set; }

    [Inject]
    private ISettings Settings { get; set; }

    [Inject]
    private TradeResources Resources { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private ITradeFilterService TradeFilterService { get; set; }

    [CascadingParameter]
    public Item Item { get; set; }

    [CascadingParameter]
    private FiltersModel Filters { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    private TradeSearchResult<string> QueryResult { get; set; }
    private List<TradeItem> Results { get; set; }
    private bool FullyLoaded => (Results?.Count ?? 0) == (QueryResult?.Result?.Count ?? 0);
    private bool IsFetching { get; set; }
    private Layout Layout { get; set; }

    public async Task Search()
    {
        Results = new List<TradeItem>();
        IsFetching = true;
        StateHasChanged();

        QueryResult = await TradeSearchService.Search(Item, Settings.Trade_Item_Currency.GetEnumFromValue<TradeCurrency>(), Filters.PropertyFilters, Filters.ModifierFilters, Filters.PseudoFilters);
        IsFetching = false;

        await LoadMoreData();
        StateHasChanged();
    }

    public async Task LoadMoreData()
    {
        if (IsFetching)
        {
            return;
        }

        var ids = QueryResult.Result.Skip(Results?.Count ?? 0).Take(10).ToList();
        if (ids.Count == 0)
        {
            return;
        }

        IsFetching = true;

        var result = await TradeSearchService.GetResults(QueryResult.Id, ids, Filters.PseudoFilters);
        if (result != null)
        {
            Results.AddRange(result);
        }

        IsFetching = false;

        StateHasChanged();
    }

    private void LayoutChanged(Layout layout)
    {
        Layout = layout;
        StateHasChanged();
    }
}
