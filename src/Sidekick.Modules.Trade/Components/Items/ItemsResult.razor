@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Options

@if (PriceCheckService.CurrentMode != TradeMode.Item)
{
    return;
}

@if (PriceCheckService.IsLoading)
{
    <AppLoading/>
}
else if (PriceCheckService.ItemTradeResult != null)
{
    <div class="max-w-[800px] mx-auto">
        <div class="flex items-center w-full justify-between mb-3">
            <TextBase Class="text-teal-500">@LeagueId</TextBase>
            <div class="flex flex-nowrap gap-3">
                <CountString Count="PriceCheckService.TradeItems?.Count ?? 0"
                             Total="PriceCheckService.ItemTradeResult.Total"/>
                <OpenWebsiteLink QueryId="@PriceCheckService.ItemTradeResult.Id"/>
            </div>
        </div>

        @if (PriceCheckService.TradeItems != null)
        {
            foreach (var result in PriceCheckService.TradeItems)
            {
                <ItemComponent @key="result.Id" Item="result"/>
            }
        }

        @if (!FullyLoaded && PriceCheckService.TradeItems != null)
        {
            <div class="flex justify-center">
                <ButtonPrimary OnClick="PriceCheckService.LoadMoreItems">@Resources.LoadMoreData</ButtonPrimary>
            </div>
        }

    </div>
}

@implements IDisposable

@inject  TradeResources Resources
@inject  ISettingsService SettingsService
@inject PriceCheckService PriceCheckService

@code {

    private string? LeagueId { get; set; }

    private bool FullyLoaded => (PriceCheckService.TradeItems?.Count ?? 0) == (PriceCheckService.ItemTradeResult?.Result?.Count ?? 0);

    protected override async Task OnInitializedAsync()
    {
        LeagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        PriceCheckService.LoadingChanged += StateHasChanged;
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        PriceCheckService.LoadingChanged -= StateHasChanged;
    }

}
