@using Sidekick.Apis.Poe
@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Apis.Poe.Trade.Results;
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Components.Filters
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Game.Items
@using MudBlazor

@if (Visible)
{
    <ItemsOptions @bind-Layout="Layout"
                  QueryId="@QueryResult?.Id"
                  Count="Results?.Count ?? 0"
                  Total="QueryResult?.Total ?? 0"/>

    @if (Results != null)
    {
        foreach (var result in Results)
        {
            <ItemComponent @key="result.Id" Item="result" Layout="Layout"/>
        }
    }

    @if (IsFetching)
    {
        <LoadingAlert Text="Loading results"/>
    }
    else if (!FullyLoaded && Results != null)
    {
        <MudButton Variant="Variant.Outlined" Color="Color.Info" FullWidth="true" OnClick="LoadMoreData" Class="mt-2">@Resources.LoadMoreData</MudButton>
    }
}

@inject  TradeResources Resources
@inject  ITradeSearchService TradeSearchService
@inject  ISettingsService SettingsService
@inject  NavigationManager NavigationManager
@inject  ITradeFilterService TradeFilterService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    [CascadingParameter]
    public required FiltersModel Filters { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    private TradeSearchResult<string>? QueryResult { get; set; }

    private List<TradeItem>? Results { get; set; }

    private bool FullyLoaded => (Results?.Count ?? 0) == (QueryResult?.Result?.Count ?? 0);

    private bool IsFetching { get; set; }

    private Layout Layout { get; set; }

    public async Task Search()
    {
        Results = new List<TradeItem>();
        IsFetching = true;
        StateHasChanged();

        var tradeCurrency = await SettingsService.GetEnum<TradeCurrency>(SettingKeys.PriceCheckItemCurrency) ?? TradeCurrency.Chaos;
        QueryResult = await TradeSearchService.Search(
            Item,
            tradeCurrency,
            Filters.PropertyFilters,
            Filters.ModifierFilters,
            Filters.PseudoFilters);
        IsFetching = false;

        await LoadMoreData();
        StateHasChanged();
    }

    public async Task LoadMoreData()
    {
        if (IsFetching || QueryResult?.Result == null || QueryResult?.Id == null)
        {
            return;
        }

        var ids = QueryResult
                  .Result.Skip(Results?.Count ?? 0)
                  .Take(10)
                  .ToList();
        if (ids.Count == 0)
        {
            return;
        }

        IsFetching = true;

        var result = await TradeSearchService.GetResults(QueryResult.Id, ids, Filters.PseudoFilters);
        Results?.AddRange(result);

        IsFetching = false;

        StateHasChanged();
    }

    private void LayoutChanged(Layout layout)
    {
        Layout = layout;
        StateHasChanged();
    }

}
