@if (Item.RequirementContents != null)
{
    <div class="requirements font-smallcaps">
        <MudText Typo="Typo.body1" Class="font-smallcaps" Align="Align.Center">@Resources.Requires @((MarkupString)Text)</MudText>
    </div>

    <ItemSeparatorComponent Item="Item" />
}

@code {
    [Inject] private TradeResources Resources { get; set; }

    [Parameter] public TradeItem Item { get; set; }

    private string Text { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Item.RequirementContents == null)
        {
            return;
        }

        Text = string.Join(", ", Item.RequirementContents.Select(x => x.Text));

        var highlightMatches = new Dictionary<int, (string Value, LineContentType Type)>();

        foreach (var requirement in Item.RequirementContents)
        {
            foreach (var value in requirement.Values)
            {
                var color = value.Type switch
                {
                    LineContentType.Augmented => "#8888FF",
                    _ => "#FFFFFF",
                };

                Text = Text.Replace(value.Value, $"<span style=\"color:{color};\">{value.Value}</span>");
            }
        }
    }
}
