@using Sidekick.Common.Settings
@if (QueryId == null)
{
    return;
}

<div class="d-flex flex-row align-center justify-space-between mb-2">
    <div>
        <MudText Color="Color.Info">@LeagueId</MudText>
        <CountString Count="Count" Total="Total"/>
    </div>
    <div>
        <MudButtonGroup Size="@Size.Small">
            <OpenWebsiteLink QueryId="@QueryId" Mode="TradeMode.Item"/>
            @if (Item.CanHaveModifiers)
            {
                <ToggleLayoutButton Layout="Layout" LayoutChanged="LayoutChanged"/>
            }
        </MudButtonGroup>
    </div>
</div>

@inject ISettingsService SettingsService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    [Parameter]
    public string? QueryId { get; set; }

    [Parameter]
    public Layout Layout { get; set; }

    [Parameter]
    public EventCallback<Layout> LayoutChanged { get; set; }

    [Parameter]
    public int Count { get; set; }

    [Parameter]
    public int Total { get; set; }

    private string? LeagueId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LeagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        var layout = await SettingsService.GetEnum<Layout>(SettingKeys.PriceCheckLayout);
        await LayoutChanged.InvokeAsync(layout ?? Layout.Cards_Maximized);

        await base.OnInitializedAsync();
    }

}
