@page "/about"
@inherits SidekickView

<MudText Typo="Typo.h1">Sidekick - @VersionNumber</MudText>
<MudAlert Variant="Variant.Text" Severity="Severity.Info" Class="mt-2 mb-4">@Resources.Disclaimer</MudAlert>
<MudPaper Class="pa-3 mb-3">
    <div>
        <MudText Typo="Typo.caption">@Resources.Operating_System - @OperatingSystem</MudText>
    </div>
    <div>
        <MudText Typo="Typo.caption">@Resources.Environment_Versions - @EnvironmentVersion</MudText>
    </div>
    <div>
        <MudText Typo="Typo.caption">@Resources.Project_Page - <MudLink @onclick="() => Navigate(ProjectUrl)">@ProjectUrl</MudLink></MudText>
    </div>
    <div>
        <MudText Typo="Typo.caption">@Resources.Bug_Reports - <MudLink @onclick="() => Navigate(BugUrl)">@ProjectUrl</MudLink></MudText>
    </div>
</MudPaper>

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h3">@Resources.Contributors</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @foreach (var contributor in Contributors)
        {
            <MudText>@contributor.Key - <MudLink @onclick="() => Navigate(contributor.Value)">@contributor.Value</MudLink></MudText>
        }
    </MudCardContent>
</MudCard>

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h3">@Resources.Translators</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @foreach (var translator in Translators)
        {
            <MudText>@translator.Key - <MudLink @onclick="() => Navigate(translator.Value)">@translator.Value</MudLink></MudText>
        }
    </MudCardContent>
</MudCard>

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h3">@Resources.Third_Parties</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @foreach (var thirdparty in ThirdParties)
        {
            <MudText>@thirdparty.Key - <MudLink @onclick="() => Navigate(thirdparty.Value)">@thirdparty.Value</MudLink></MudText>
        }
    </MudCardContent>
</MudCard>

@code {
    [Inject] private AboutResources Resources { get; set; }
    [Inject] private ILogger<About> Logger { get; set; }
    [Inject] private IBrowserProvider Browser { get; set; }

    public string VersionNumber { get; private set; }

    public string OperatingSystem { get; private set; }

    public string EnvironmentVersion { get; private set; }

    public string ProjectUrl { get; private set; } = "https://github.com/Sidekick-Poe/Sidekick";

    public string BugUrl { get; private set; } = "https://github.com/Sidekick-Poe/Sidekick/issues";

    public Dictionary<string, string> Contributors { get; private set; } = new Dictionary<string, string>()
    {
        { "domialex", "https://github.com/domialex" },
        { "leMicin", "https://github.com/leMicin" },
        { "mwardrop", "https://github.com/mwardrop" },
        { "Blinke", "https://github.com/Blinke" },
        { "Zalhera", "https://github.com/Zalhera" },
        { "cmos12345", "https://github.com/cmos12345" },
        { "kai-oswald", "https://github.com/kai-oswald" },
        { "Arisix", "https://github.com/Arisix" },
        { "dandrew-xx", "https://github.com/dandrew-xx" },
        { "pobiega", "https://github.com/pobiega" },
        { "lascoin", "https://github.com/lascoin" },
        { "vestakip", "https://github.com/vestakip" },
        { "PeteyPii", "https://github.com/PeteyPii" },
    };

    public Dictionary<string, string> Translators { get; private set; } = new Dictionary<string, string>()
{
        { "Taiwanese Mandarin - Arisix", "https://github.com/Arisix" }
    };

    public Dictionary<string, string> ThirdParties { get; private set; } = new Dictionary<string, string>()
{
        { "Path of Exile Trade", "https://www.pathofexile.com/trade" },
        { "poe.ninja", "https://poe.ninja/" },
        { "poeprices.info", "https://www.poeprices.info/" },
        { "MudBlazor", "https://github.com/Garderoben/MudBlazor" },
        { "SharpHook", "https://sharphook.tolik.io/" },
        { "FuzzySharp", "https://github.com/JakeBayer/FuzzySharp" },
        { "TextCopy", "https://github.com/CopyText/TextCopy" },
    };

    protected override async Task OnInitializedAsync()
    {
        VersionNumber = GetType().Assembly.GetName().Version.ToString();

        try
        {
            OperatingSystem = Environment.OSVersion.VersionString;
            EnvironmentVersion = Environment.Version.ToString();
        }
        catch (Exception e)
        {
            Logger.LogInformation($"[About Page] - Failed to load Operating System details: " + e.Message);
        }

        await base.OnInitializedAsync();
    }

    public override string Title => Resources.Title;

    public void Navigate(string uri)
    {
        Browser.OpenUri(new Uri(uri));
    }
}
