@using Sidekick.Apis.Poe.Authentication;
@if (AuthenticationService.CurrentState == AuthenticationState.Authenticated)
{
    <MudAlert Severity="Severity.Normal" Variant="Variant.Filled" Square="true" Dense="true" Icon="@Icons.Material.Filled.Login">
        <div class="d-flex align-center flex-nowrap">
            <div class="mr-4">You are currently authenticated for the next @TokenRemainingString.</div>
            <MudButton OnClick="() => AuthenticationService.Authenticate(true)" Size="Size.Small" DisableElevation="true" Color="Color.Primary" Variant="Variant.Filled">Re-authenticate</MudButton>
        </div>
    </MudAlert>
    <MudProgressLinear Color="Color.Primary" Value="TokenPercentRemaining" />
}

@if (AuthenticationService.CurrentState == AuthenticationState.InProgress)
{
    <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Square="true" Dense="true" Icon="@Icons.Material.Filled.HourglassTop">You are currently being authenticated.</MudAlert>
    <MudProgressLinear Color="Color.Info" Indeterminate="true" />
}

@if (AuthenticationService.CurrentState == AuthenticationState.Unauthenticated)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Square="true" Dense="true" Icon="@Icons.Material.Filled.Logout">
        <div class="d-flex align-center flex-nowrap">
            <div class="mr-4">You are currently unauthenticated.</div>
            <MudButton OnClick="() => AuthenticationService.Authenticate(true)" Size="Size.Small" DisableElevation="true" Color="Color.Error" Variant="Variant.Filled">Authenticate</MudButton>
        </div>
    </MudAlert>
}

@implements IDisposable
@inject IAuthenticationService AuthenticationService
@inject ISettings Settings
@code {
    private int TokenPercentRemaining
    {
        get
        {
            if (Settings.Bearer_Expiration == null)
            {
                return 0;
            }

            var remainingTime = Settings.Bearer_Expiration - DateTimeOffset.Now;
            if (remainingTime == null)
            {
                return 0;
            }

            return (int)((remainingTime.Value.TotalMinutes / TimeSpan.FromHours(10).TotalMinutes) * 100);
        }
    }

    private string TokenRemainingString
    {
        get
        {
            if (Settings.Bearer_Expiration == null)
            {
                return "";
            }

            var remainingTime = Settings.Bearer_Expiration - DateTimeOffset.Now;
            if (remainingTime == null)
            {
                return "";
            }

            return string.Format("{0:00}:{1:00}", remainingTime.Value.Hours, remainingTime.Value.Minutes);
        }
    }

    protected override void OnInitialized()
    {
        AuthenticationService.OnStateChanged += OnChanged;

        var timer = new System.Threading.Timer(
            e => { InvokeAsync(StateHasChanged); },
            null,
            TimeSpan.Zero,
            TimeSpan.FromMinutes(1)
        );

        base.OnInitialized();
    }

    private void OnChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthenticationService.OnStateChanged -= OnChanged;
    }
}
