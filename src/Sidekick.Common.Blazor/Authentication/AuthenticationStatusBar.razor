@using Sidekick.Apis.Poe.Authentication;
@if (AuthenticationService.CurrentState == AuthenticationState.Authenticated)
{
    <MudAlert Severity="Severity.Normal" Variant="Variant.Filled" Square="true" Dense="true" Icon="@Icons.Material.Filled.Login">
        <div class="align-center d-flex flex-wrap justify-space-around">
            <div class="ma-1">You are authenticated for the next @TokenRemainingString.</div>
            <MudButton OnClick="() => AuthenticationService.Authenticate(true)" Size="Size.Small" DisableElevation="true" Color="Color.Primary" Variant="Variant.Filled" Class="ma-1">Re-authenticate</MudButton>
        </div>
    </MudAlert>
    <MudProgressLinear Color="Color.Primary" Value="TokenPercentRemaining" />
}

@if (AuthenticationService.CurrentState == AuthenticationState.InProgress)
{
    <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Square="true" Dense="true" Icon="@Icons.Material.Filled.HourglassTop">You are currently authenticating.</MudAlert>
    <MudProgressLinear Color="Color.Info" Indeterminate="true" />
}

@if (AuthenticationService.CurrentState == AuthenticationState.Unauthenticated)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Square="true" Dense="true" Icon="@Icons.Material.Filled.Logout">
        <div class="align-center d-flex flex-wrap justify-space-around">
            <div class="ma-1">You are unauthenticated.</div>
            <MudButton OnClick="() => AuthenticationService.Authenticate(true)" Size="Size.Large" DisableElevation="true" Color="Color.Error" Variant="Variant.Text" Class="white ma-1">Authenticate</MudButton>
        </div>
    </MudAlert>
}

@implements IDisposable
@inject IAuthenticationService AuthenticationService
@inject ISettingsService SettingsService
@code {
    private Timer? refreshTimer;

    private int TokenPercentRemaining
    {
        get
        {
            var settings = SettingsService.GetSettings();
            if (settings.Bearer_Expiration == null)
            {
                return 0;
            }

            var remainingTime = settings.Bearer_Expiration - DateTimeOffset.Now;
            return (int)((remainingTime.Value.TotalMinutes / TimeSpan.FromHours(10).TotalMinutes) * 100);
        }
    }

    private string TokenRemainingString
    {
        get
        {
            var settings = SettingsService.GetSettings();
            if (settings.Bearer_Expiration == null)
            {
                return "";
            }

            var remainingTime = settings.Bearer_Expiration - DateTimeOffset.Now;
            return $"{remainingTime.Value.Hours:00}:{remainingTime.Value.Minutes:00}";
        }
    }

    protected override void OnInitialized()
    {
        AuthenticationService.OnStateChanged += OnChanged;

        refreshTimer = new Timer(
            _ => { InvokeAsync(StateHasChanged); },
            null,
            TimeSpan.Zero,
            TimeSpan.FromMinutes(1)
        );

        base.OnInitialized();
    }

    private void OnChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        AuthenticationService.OnStateChanged -= OnChanged;
    }
}
