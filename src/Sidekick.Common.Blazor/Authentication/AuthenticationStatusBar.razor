@using Sidekick.Apis.Poe.Authentication;
@using Sidekick.Common.Settings

@if (CurrentState == AuthenticationState.Authenticated)
{
    <MudAlert Severity="Severity.Normal" Variant="Variant.Filled" Square="true" Dense="true" Icon="@Icons.Material.Filled.Login">
        <div class="align-center d-flex flex-wrap justify-space-around">
            <div class="ma-1">You are authenticated for the next @TokenRemainingString.</div>
            <MudButton OnClick="() => AuthenticationService.Authenticate(true)" Size="Size.Small" DisableElevation="true" Color="Color.Primary" Variant="Variant.Filled" Class="ma-1">Re-authenticate</MudButton>
        </div>
    </MudAlert>
    <MudProgressLinear Color="Color.Primary" Value="TokenPercentRemaining"/>
}
else if (CurrentState == AuthenticationState.InProgress)
{
    <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Square="true" Dense="true" Icon="@Icons.Material.Filled.HourglassTop">You are currently authenticating.</MudAlert>
    <MudProgressLinear Color="Color.Info" Indeterminate="true"/>
}
else if (CurrentState == AuthenticationState.Unauthenticated)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Square="true" Dense="true" Icon="@Icons.Material.Filled.Logout">
        <div class="align-center d-flex flex-wrap justify-space-around">
            <div class="ma-1">You are unauthenticated.</div>
            <MudButton OnClick="() => AuthenticationService.Authenticate(true)" Size="Size.Large" DisableElevation="true" Color="Color.Error" Variant="Variant.Text" Class="white ma-1">Authenticate</MudButton>
        </div>
    </MudAlert>
}

@implements IDisposable
@inject IAuthenticationService AuthenticationService
@inject ISettingsService SettingsService

@code {
    private Timer? refreshTimer;

    private AuthenticationState CurrentState { get; set; }

    private int TokenPercentRemaining { get; set; }

    private string? TokenRemainingString { get; set; }

    protected override void OnInitialized()
    {
        AuthenticationService.OnStateChanged += OnChanged;

        refreshTimer = new Timer(
            _ => { OnChanged(); },
            null,
            TimeSpan.Zero,
            TimeSpan.FromMinutes(1));

        OnChanged();
        base.OnInitialized();
    }

    private void OnChanged()
    {
        InvokeAsync(
            async () =>
            {
                CurrentState = await AuthenticationService.GetCurrentState();

                var bearerExpiration = await SettingsService.GetDateTime(SettingKeys.BearerExpiration);
                if (bearerExpiration == null)
                {
                    TokenPercentRemaining = 0;
                    TokenRemainingString = "";
                }
                else
                {
                    var remainingTime = bearerExpiration - DateTimeOffset.Now;
                    TokenPercentRemaining = (int)((remainingTime.Value.TotalMinutes
                                                   / TimeSpan.FromHours(10)
                                                             .TotalMinutes)
                                                  * 100);
                    TokenRemainingString = $"{remainingTime.Value.Hours:00}:{remainingTime.Value.Minutes:00}";
                }

                StateHasChanged();
            });
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        AuthenticationService.OnStateChanged -= OnChanged;
    }

}
