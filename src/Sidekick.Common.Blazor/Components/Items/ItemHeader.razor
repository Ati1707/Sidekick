@using Sidekick.Common.Game.Items

<div class="relative py-0 px-[7px] @BackgroundClass">
    <ItemHeaderBackground Rarity="Rarity"
                          Double="Double">
        <div class="absolute top-0 bottom-0 flex items-center left-[2px]">
            <ItemInfluencesComponent Influences="Influences" />
        </div>
        @if (!string.IsNullOrEmpty(Name))
        {
            <div class="text-lg text-center font-caps @NameClass @context.LabelClass">@Name</div>
        }
        @if (!string.IsNullOrEmpty(Type))
        {
            <div class="text-lg text-center font-caps @TypeClass @context.LabelClass">@Type</div>
        }
        <div class="absolute top-0 bottom-0 flex items-center right-[2px]">
            <ItemInfluencesComponent Influences="Influences" />
        </div>
    </ItemHeaderBackground>
</div>

@code {
    [Parameter]
    public Rarity Rarity { get; set; }

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public string? Type { get; set; }

    [Parameter]
    public bool IsRelic { get; set; }

    [Parameter]
    public Influences Influences { get; set; }

    public bool SingleLine { get; set; }

    private bool Double
    {
        get
        {
            if (SingleLine)
            {
                return false;
            }

            switch (Rarity)
            {
                case Rarity.Currency: return false;
                case Rarity.Magic: return false;
                case Rarity.Gem: return false;
                case Rarity.Rare:
                    return !string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(Type);
                case Rarity.Unique:
                    return !string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(Type);
                default: return false;
            }
        }
    }

    private string BackgroundClass
    {
        get
        {
            if (IsRelic)
            {
                if (!Double)
                {
                    return "header-relic";
                }

                return "header-double-relic";
            }

            switch (Rarity)
            {
                case Rarity.Currency: return "header-currency";
                case Rarity.Magic: return "header-magic";
                case Rarity.Gem: return "header-gem";
                case Rarity.Rare:
                    if (!Double)
                    {
                        return "header-rare";
                    }
                    return "header-double-rare";
                case Rarity.Unique:
                    if (!Double)
                    {
                        return "header-unique";
                    }
                    return "header-double-unique";
                default: return "header-normal";
            }
        }
    }

    private string NameClass
    {
        get
        {
            if (Double)
            {
                return "h-[27px] leading-[23px] pt-[4px] whitespace-nowrap overflow-hidden text-ellipsis";
            }

            return "h-[34px] leading-[34px] whitespace-nowrap overflow-hidden text-ellipsis";
        }
    }

    private string TypeClass
    {
        get
        {
            if (Double)
            {
                return "h-[27px] leading-[23px] pb-[4px] whitespace-nowrap overflow-hidden text-ellipsis";
            }

            return "h-[34px] leading-[34px] whitespace-nowrap overflow-hidden text-ellipsis";
        }
    }
}
