@using Sidekick.Common.Blazor.Layouts;
@using Sidekick.Common.Exceptions;

<LoggingErrorBoundary @ref="Boundary">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        @if (ShowError)
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                @Message
                @if (!string.IsNullOrEmpty(AdditionalInformation))
                {
                    <div class="mt-3">
                        Additional Information: <b>@AdditionalInformation</b>
                    </div>
                }
            </MudAlert>
        }
    </ErrorContent>
</LoggingErrorBoundary>

@code {
    /// <summary>
    /// Gets or sets the content of the wrapper.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    private LoggingErrorBoundary? Boundary { get; set; }

    private SidekickException? Exception
    {
        get
        {
            if (Boundary?.CurrentException is SidekickException sidekickException)
            {
                return sidekickException;
            }

            return null;
        }
    }

    private bool ShowError => Exception?.GetType() != typeof(SilentException);

    private string Message => Exception?.Message ?? "An error has occurred. This application may no longer respond until reloaded.\nIf this issue keeps reoccurring, please open a ticket on our github page.";

    private string? AdditionalInformation => Exception?.AdditionalInformation;
}
