@using Sidekick.Apis.GitHub;
@using Sidekick.Apis.GitHub.Models;
@using Sidekick.Common.Blazor.Update;
@using Sidekick.Common.Blazor.Views;
@using Sidekick.Common.Browser;
@using Sidekick.Common.Platform;
@using Sidekick.Common;

@if (Release != null && Release.IsNewerVersion)
{
    <MudAlert Severity="Severity.Info" Dense="true" Variant="Variant.Filled">
        @Resources.Available
        @if (Release.IsExecutable)
        {
            <MudLink OnClick="Download" Class="white-text" Style="text-decoration: underline;">@Resources.Download</MudLink>
        }
        else
        {
            <MudLink OnClick="OpenWebsite" Class="white-text" Style="text-decoration: underline;">@Resources.Download</MudLink>
        }
    </MudAlert>
}

@inject IGitHubClient GitHubClient;
@inject UpdateResources Resources;
@inject IViewLocator ViewLocator;
@inject ISidekickDialogs DialogService;
@inject IBrowserProvider Browser;
@code {
    private GitHubRelease? Release { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        Release = await GitHubClient.GetLatestRelease();

#if DEBUG
    Release = null;
#endif

        await base.OnInitializedAsync();
    }

    private async Task Download()
    {
        if (!await DialogService.OpenConfirmationModal(Resources.Confirm))
        {
            return;
        }

        await ViewLocator.Open("/update");
    }

    private void OpenWebsite()
    {
        Browser.OpenSidekickWebsite();
    }
}
