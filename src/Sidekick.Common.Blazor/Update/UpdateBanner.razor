@using Sidekick.Apis.GitHub;
@using Sidekick.Apis.GitHub.Models;
@using Sidekick.Common.Browser;
@using Sidekick.Common;

@if (Release is
     {
         IsNewerVersion: true
     })
{
    <AlertInfo>
        <div class="flex items-center gap-2">
            <TextBase>@Resources["A new update is available!"]</TextBase>
            <TextCaption>
                @if (Release.IsExecutable)
                {
                    <ButtonLink OnClick="Download">@Resources["Download and Install"]</ButtonLink>
                }
                else
                {
                    <ButtonLink OnClick="OpenWebsite">@Resources["Open Website"]</ButtonLink>
                }
            </TextCaption>
        </div>
    </AlertInfo>
}

@inject IGitHubClient GitHubClient
@inject IViewLocator ViewLocator
@inject ISidekickDialogs DialogService
@inject IBrowserProvider Browser
@inject IStringLocalizer<UpdateResources> Resources

@code {

    private GitHubRelease? Release { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        Release = await GitHubClient.GetLatestRelease();

#if DEBUG
        Release = new GitHubRelease()
        {
            IsNewerVersion = true,
            IsExecutable = true,
        };
#endif

        await base.OnInitializedAsync();
    }

    private async Task Download()
    {
        if (!await DialogService.OpenConfirmationModal(Resources["Are you sure you want to download and install this update?"]))
        {
            return;
        }

        await ViewLocator.Open("/update");
    }

    private void OpenWebsite()
    {
        Browser.OpenSidekickWebsite();
    }

}
