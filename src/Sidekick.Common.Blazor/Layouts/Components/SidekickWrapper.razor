
<SidekickErrorBoundary @ref="Boundary">
    <ChildContent>
        <CascadingValue Value="this" IsFixed="true">
            <CascadingValue Value="View">
                <div class="sidekick-wrapper @(HasAppbar ? "has-appbar" : "")">
                    <MudLayout>
                        @ChildContent
                    </MudLayout>
                </div>
            </CascadingValue>
        </CascadingValue>
    </ChildContent>
    <ErrorContent>
        <div class="blazor-error">
            <div class="content">
                <div>
                    An error has occurred. This application may no longer respond until reloaded.<br />
                    If this issue keeps reoccurring, please open a ticket on our github page.
                </div>

                <a href="javascript:;" class="reload" @onclick="Reload">Reload</a>
            </div>
        </div>
    </ErrorContent>
</SidekickErrorBoundary>

@code {
    /// <summary>
    /// Gets or sets the content of the wrapper.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the view has an app bar or not.
    /// </summary>
    [Parameter]
    public bool HasAppbar { get; set; } = true;

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    /// <summary>
    /// Gets or sets the current view.
    /// </summary>
    public SidekickView View { get; set; }

    private SidekickErrorBoundary Boundary { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Boundary.CurrentException != null)
        {
            await JSRuntime.InvokeVoidAsync("console.error", Boundary.CurrentException.ToString());
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void SetView(SidekickView view)
    {
        View = view;
        StateHasChanged();
    }

    private void Reload()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}
