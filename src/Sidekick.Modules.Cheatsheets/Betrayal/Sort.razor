
<MudSelect T="string" Variant="Variant.Filled" Label="Sort" Value="Value" ValueChanged="InternalSortChanged">
    @foreach (var option in Options)
    {
        <MudSelectItem Value="@option.Key">@option.Value</MudSelectItem>
    }
</MudSelect>

@code {
    [Inject] private IMediator Mediator { get; set; }
    [Inject] private ISidekickSettings Settings { get; set; }
    [Inject] private BetrayalResources Resources { get; set; }

    [Parameter] public EventCallback OnChange { get; set; }

    private Dictionary<string, string> Options { get; set; }
    private string Value { get; set; }

    protected override Task OnInitializedAsync()
    {
        Value = Settings.Cheatsheets_Betrayal_Sort;
        Options = new Dictionary<string, string>()
        {
            { "default", Resources.Sort_Alphabetical },
            { "value", Resources.Sort_Value },
            { "transportation", Resources.Sort_Transportation },
            { "fortification", Resources.Sort_Fortification },
            { "research", Resources.Sort_Research },
            { "intervention", Resources.Sort_Intervention },
        };

        return base.OnInitializedAsync();
    }

    public async Task InternalSortChanged(string value)
    {
        Value = value;
        await Mediator.Send(new SaveSettingCommand(nameof(ISidekickSettings.Cheatsheets_Betrayal_Sort), Value));
        await OnChange.InvokeAsync();
    }
}
