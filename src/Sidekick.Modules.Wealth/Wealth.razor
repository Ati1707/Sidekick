@page "/wealth"
@inherits SidekickView

    <MudButton Variant="Variant.Filled" Class="pr-5" Color="Color.Primary" OnClick="StartParsing">Start Parsing</MudButton>
    <MudButton Variant="Variant.Filled" Class="pr-5" Color="Color.Primary" OnClick="StopParsing">Stop Parsing</MudButton>
    <div class="d-flex flex-grow-1 gap-4">
        <MudPaper Class="flex-1 d-flex py-8" Elevation="0" Width="80%">
        <MudCard Width="100%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h3">Items</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <br />
                    <MudTable Items="@StashItems.Where(x => !x.Removed)" Hover="true" Breakpoint="Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh></MudTh>
                            <MudTh>Name</MudTh>
                            <MudTh>Count</MudTh>
                            <MudTh>Price</MudTh>
                            <MudTh>Total</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel=""><MudImage Src="@context.Icon" Class="rounded-lg" /></MudTd>
                            <MudTd DataLabel="Name">@context.Name</MudTd>
                            <MudTd DataLabel="Count">@context.Count</MudTd>
                            <MudTd DataLabel="Price">@context.Price</MudTd>
                            <MudTd DataLabel="Total">@context.Total</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudPaper>
        <MudPaper Class="flex-1 d-flex py-8" Elevation="0" Width="20%">
            <MudCard Width="100%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h3">Logs</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <br />   
                    @foreach (var logitem in Log.OrderByDescending(x => x.Item1))
                    {
                    <MudAlert Severity="Severity.Info">@logitem.Item1.ToString("hh:mm:ss") - @logitem.Item2</MudAlert>
                    }
                </MudCardContent>
            </MudCard>
        </MudPaper>
    </div>
        
@code {
    [Inject] private WealthResources Resources { get; set; }
    [Inject] private ILogger<Wealth> Logger { get; set; }
    [Inject] private WealthParser WealthParser { get; set; }
    [Inject] private WealthDbContext Database { get; set; }

    static List<Tuple<DateTime, String>> Log { get; set; } = new List<Tuple<DateTime, String>>();
    static List<Item> StashItems = new List<Item>();

    public override string Title => "Wealth Tracker";

    protected override void OnInitialized()
    {
        WealthParser.OnStashParsing += OnStashParsing;
        WealthParser.OnStashParsed += OnStashParsed;

        base.OnInitialized();

    }

    private async void StartParsing()
    {
        await WealthParser.Start();
    }

    private void StopParsing()
    {
        WealthParser.Stop();
    }

    public async void OnStashParsing(string[] obj)
    {
        Log.Add(Tuple.Create(DateTime.Now, $"Parsing Stash: ${obj[1].ToString()}"));

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public async void OnStashParsed(string[] obj)
    {
        Log.Add(Tuple.Create(DateTime.Now, $"Parsed Stash: ${obj[1].ToString()}"));

        StashItems = Database.Items.ToList();

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    #region API Stash
    

   
    #endregion
}
