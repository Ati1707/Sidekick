@page "/wealth"
@inherits SidekickView
@implements IDisposable


    <div class="d-flex flex-grow-1 gap-4">
        <MudPaper Class="flex-1 d-flex py-8" Elevation="0" Width="80%">
        <MudCard Width="100%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h3">Items</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <br />
                    @if (StashItems != null)
                    {
                        foreach (var stashItem in StashItems)
                        {
                            <MudText><MudImage Src="@stashItem.icon" Class="rounded-lg" />@stashItem.getFriendlyName() : @stashItem.stackSize</MudText>
                        }
                    }
                </MudCardContent>
            </MudCard>
        </MudPaper>
        <MudPaper Class="flex-1 d-flex py-8" Elevation="0" Width="20%">
            <MudCard Width="100%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h3">Logs</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <br />   
                    @foreach (var logitem in Log.OrderByDescending(x => x.Item1))
                    {
                    <MudAlert Severity="Severity.Info">@logitem.Item1.ToString("hh:h:s") - @logitem.Item2</MudAlert>
                    }
                </MudCardContent>
            </MudCard>
        </MudPaper>
    </div>
        
@code {
    [Inject] private WealthResources Resources { get; set; }
    [Inject] private ILogger<Wealth> Logger { get; set; }
    [Inject] private StashService StashService { get; set; }
    [Inject] private IAuthenticationService AuthorizationService { get; set; }
    [Inject] private WealthParser WealthParser { get; set; }

    static List<Tuple<DateTime, String>> Log { get; set; } = new List<Tuple<DateTime, String>>();
    static List<APIStashItem> StashItems { get; set; }

    public override string Title => "Wealth Tracker";

    protected override void OnInitialized()
    {
        InterprocessService.OnMessage += InterprocessService_CustomProtocolCallback;

        //InvokeAsync(ParserLoop);

        base.OnInitialized();
    }


    public void InterprocessService_CustomProtocolCallback(string[] obj)
    {
        if (obj.Length > 0 && obj[0].ToUpper().StartsWith("SIDEKICK://OAUTH/POE"))
        {
            var queryDictionary = System.Web.HttpUtility.ParseQueryString(new System.Uri(obj[0]).Query);

            AuthorizationService.AuthenticationCallback(
                queryDictionary["code"],
                queryDictionary["state"]
            );
        }
    }

    // private async void ParserLoop()
    // {
        
    // }



    private async void RefreshStashItems()
    {
        if (StashItems == null) { StashItems = new List<APIStashItem>(); }

        StashItems.Clear();

        //StashItems = await StashService.GetStashItems();

        StateHasChanged();

    }

    public void Dispose()
    {
        InterprocessService.OnMessage -= InterprocessService_CustomProtocolCallback;
    }


    #region API Stash
    

   
    #endregion
}
