
<div class="font-smallcaps">
    <div>Currency per Hour: @CurrencyPerHour</div>
    @if (CurrencyPerHour == null)
    {
        <MudTooltip Text="Currency per hour will be calculated at the next snapshot.">
            <MudIcon Size="MudBlazor.Size.Small" Icon="@Icons.Material.Filled.Warning" Color="MudBlazor.Color.Warning" />
        </MudTooltip>
    }
</div>

@inject DbContextOptions<WealthDbContext> DbContextOptions
@inject WealthParser WealthParser
@implements IDisposable
@code {
    private int? CurrencyPerHour { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WealthParser.OnSnapshotTaken += Update;
        await LoadData();
        await base.OnInitializedAsync();
    }

    public void Update()
    {
        _ = InvokeAsync(async () =>
        {
            await LoadData();
            StateHasChanged();
        });
    }

    private async Task LoadData()
    {
        var oneHourAgo = DateTimeOffset.Now.AddHours(-1);
        using var database = new WealthDbContext(DbContextOptions);

        var oneHourAgoSnapshot = await database.FullSnapshots
            .Where(x => x.Date > oneHourAgo)
            .OrderBy(x => x.Date)
            .FirstOrDefaultAsync();

        var latestSnapshot = await database.FullSnapshots
            .OrderByDescending(x => x.Date)
            .FirstOrDefaultAsync();

        if (oneHourAgoSnapshot == null || latestSnapshot == null)
        {
            CurrencyPerHour = null;
            return;
        }

        var minutesBetweenSnapshots = (latestSnapshot.Date - oneHourAgoSnapshot.Date).TotalMinutes;
        if (minutesBetweenSnapshots == 0)
        {
            CurrencyPerHour = null;
            return;
        }

        var currencyBetweenSnapshots = latestSnapshot.Total - oneHourAgoSnapshot.Total;
        CurrencyPerHour = (int)((60 / minutesBetweenSnapshots) * currencyBetweenSnapshots);
    }

    public void Dispose()
    {
        WealthParser.OnSnapshotTaken -= Update;
    }
}
