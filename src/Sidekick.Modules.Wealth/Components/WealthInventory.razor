<MudTable Height="330px" Items="@StashItems" Dense="true" Hover="true" SortLabel="Sort By" Filter="new Func<ItemView,bool>(Search)" Breakpoint="Breakpoint.Sm" Width="650px">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Inventory</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ItemView, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ItemView, object>(x=>x.Count)">Count</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<ItemView, object>(x=>x.Price)">Price</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ItemView, object>(x=>x.Total)">Total</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""><MudImage Width="30" Height="30" Src="@context.Icon" Class="rounded-lg" /></MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Count">@context.Count</MudTd>
        <MudTd DataLabel="Price">@Math.Round(context.Price, 2)</MudTd>
        <MudTd DataLabel="Total">@Math.Round(context.Total, 2)</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private WealthDbContext Database { get; set; }
    [Inject] private DbContextOptions<WealthDbContext> Options { get; set; }

    static List<ItemView> StashItems = new List<ItemView>();
    private string _searchString = "";

    protected override void OnInitialized()
    {
        Database = new WealthDbContext(Options);

        WealthParser.OnStashParsed += OnStashParsed;

        RetrieveStashItems();

        base.OnInitialized();
    }

    public void OnStashParsed(string[] obj)
    {
        RetrieveStashItems();
    }

    public async void RetrieveStashItems()
    {
        if (Database.Items.Count() > 0)
        {
            StashItems = Database.Items
                .Where(x => !x.Removed)
                .GroupBy(x => x.Name)
                .Select(y => new ItemView
                    {
                        Icon = y.FirstOrDefault().Icon,
                        Name = y.FirstOrDefault().Name,
                        Count = y.Sum(i => i.Count),
                        Price = y.FirstOrDefault().Price,
                        Total = y.Sum(i => i.Total)
                    }
                ).ToList();

            await InvokeAsync(() => { StateHasChanged(); });

        }
    }

    private bool Search(ItemView element) => FilterFunc(element, _searchString);

    private bool FilterFunc(ItemView element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    class ItemView
    {
        public String Icon { get; set; }
        public String Name { get; set; }
        public int Count { get; set; }
        public double Price { get; set; }
        public double Total { get; set; }
    }
}
