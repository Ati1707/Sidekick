@if (Data != null && Labels != null)
{
    <MudChart ChartType="ChartType.Donut" InputData="@Data" InputLabels="@Labels" Height="@WealthView.ChartHeight">
        <CustomGraphics>
            <text class="donut-inner-text" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="grey" font-size="3">Total Wealth</text>
            <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="gold" font-size="5">@TotalWealth.ToString("N0")</text>
        </CustomGraphics>
    </MudChart>
}

@inject DbContextOptions<WealthDbContext> DbContextOptions
@inject WealthParser WealthParser
@implements IDisposable
@code {
    [CascadingParameter]
    public WealthView View { get; set; } = null!;

    private double[]? Data { get; set; }
    private string[]? Labels { get; set; }
    private double TotalWealth { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WealthParser.OnStashParsed += Update;
        View.OnSelectedStashIdsChanged += Update;
        await LoadData();
        await base.OnInitializedAsync();
    }

    public void Update()
    {
        _ = InvokeAsync(async () =>
        {
            await LoadData();
            StateHasChanged();
        });
    }

    private async Task LoadData()
    {
        using var database = new WealthDbContext(DbContextOptions);
        var stashes = await database.Stashes
            .Where(x => View.SelectedStashIds.Contains(x.Id))
            .OrderByDescending(x => x.Total)
            .ToListAsync();

        Data = stashes.Select(x => x.Total).ToArray();
        Labels = stashes.Select(x => x.Name).ToArray();
        TotalWealth = Data.Sum();
    }

    public void Dispose()
    {
        WealthParser.OnStashParsed -= Update;
        View.OnSelectedStashIdsChanged -= Update;
    }
}
