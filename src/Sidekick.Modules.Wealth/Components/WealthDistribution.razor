@using ApexCharts

<div style="@($"height:{WealthView.ChartHeight}")" class="pb-2">
    @if (Stashes.Any())
    {
        <ApexChart @ref="Chart"
                   TItem="Stash"
                   Options="Options"
                   Height="@("100%")">
            <ApexPointSeries TItem="Stash"
                             Items="Stashes"
                             SeriesType="SeriesType.Donut"
                             XValue="@(e => e.Name)"
                             YAggregate="@(e => (decimal?)e.Sum(e => e.Total))"
                             OrderByDescending="e=>e.Y" />
        </ApexChart>
    }
</div>

@inject DbContextOptions<WealthDbContext> DbContextOptions
@inject WealthParser WealthParser
@implements IDisposable
@code {
    [CascadingParameter]
    public WealthView View { get; set; } = null!;

    private List<Stash> Stashes { get; set; } = new();
    private ApexChartOptions<Stash> Options { get; set; } = new();
    private ApexChart<Stash>? Chart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Options = new();

        Options.Chart = new Chart
            {
                Background = "transparent",
            };

        Options.Theme = new Theme
            {
                Mode = Mode.Dark,
                Palette = PaletteType.Palette1,
            };

        Options.PlotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Labels = new DonutLabels
                        {
                            Total = new DonutLabelTotal { FontSize = "18px", Color = "white", Formatter = @"function (w) { return parseInt(w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)) }" },
                            Value = new DonutLabelValue { Color = "gold", Formatter = @"function (value) { return parseInt(value) }" }
                        },
                    }
                }
            };

        Options.Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function (value) { return parseInt(value) }"
                },
            };

        Options.Stroke = new Stroke
            {
                Show = false,
            };

        Options.Legend = new Legend
            {
                Show = false,
                Labels = new LegendLabels
                {
                    Colors = "#999",
                }
            };

        WealthParser.OnStashParsed += Update;
        View.OnSelectedStashIdsChanged += Update;
        await LoadData();
        await base.OnInitializedAsync();
    }

    public void Update()
    {
        _ = InvokeAsync(async () =>
        {
            await LoadData();
            StateHasChanged();

            if (Chart != null)
            {
                await Chart.RenderAsync();
            }
        });
    }

    private async Task LoadData()
    {
        using var database = new WealthDbContext(DbContextOptions);
        Stashes = await database.Stashes
            .Where(x => View.SelectedStashIds.Contains(x.Id))
            .OrderByDescending(x => x.Total)
            .ToListAsync();

    }

    public void Dispose()
    {
        WealthParser.OnStashParsed -= Update;
        View.OnSelectedStashIdsChanged -= Update;
    }
}
