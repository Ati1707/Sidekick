@page "/map/{itemText}"
@using Sidekick.Common.Settings
@inherits SidekickView

@if (Item == null)
{
    <LoadingAlert Text="@Resources.Parsing"/>
    return;
}

<MudDrawer Open="true"
           Variant="@DrawerVariant.Persistent"
           Width="22em"
           Class="black"
           ClipMode="DrawerClipMode.Always">
    <ItemHeaderComponent Name="@Item.Header.Name"
                         Type="@Item.Header.Type"
                         Rarity="Item.Metadata.Rarity"
                         Influences="Item.Influences"/>

    <MudText Typo="Typo.h1" Align="Align.Center" Color="@(DangerousMods.Any() ? Color.Error : Color.Success)" Class="d-flex justify-center align-center pa-4">
        <MudIcon Icon="@(DangerousMods.Any() ? Icons.Material.Filled.ThumbDown : Icons.Material.Filled.ThumbUp)" Size="Size.Large" Class="mr-2"/>
        @(DangerousMods.Any() ? Resources.Is_Unsafe : Resources.Is_Safe)
    </MudText>

    <ItemSeparator Rarity="Item.Metadata.Rarity"/>

    @foreach (var mod in DangerousMods)
    {
        <div class="d-flex align-center px-4 py-1">
            <MudIcon Icon="@Icons.Material.Filled.ThumbDown" Size="Size.Small" Color="Color.Error" Class="mr-2"/>
            <ItemModifierText Text="@mod"/>
        </div>
    }

    @if (DangerousMods.Any() && OkMods.Any())
    {
        <ItemSeparator Rarity="Item.Metadata.Rarity"/>
    }

    @foreach (var mod in OkMods)
    {
        <div class="d-flex align-center px-4 py-1">
            <MudIcon Icon="@Icons.Material.Filled.ThumbUp" Size="Size.Small" Color="Color.Success" Class="mr-2"/>
            <ItemModifierText Text="@mod"/>
        </div>
    }
</MudDrawer>

<div class="ml-0">
    <PoeWikiMapInfo Type="@Item.Invariant?.Type" Name="@Item.Invariant?.Name"/>
</div>

@inject MapInfoResources Resources
@inject IItemParser ItemParser
@inject ISettingsService SettingsService

@code {

    [Parameter]
    public required string ItemText { get; set; }

    private List<string> DangerousMods { get; } =
    [
    ];

    private List<string> OkMods { get; } =
    [
    ];

    private Item? Item { get; set; }

    public override string Title => Resources.Title;

    public override bool CloseOnBlur { get; set; }

    public override SidekickViewType ViewType => SidekickViewType.Overlay;

    public override int ViewWidth => 620;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrEmpty(ItemText))
        {
            return;
        }

        CloseOnBlur = await SettingsService.GetBool(SettingKeys.MapCheckCloseWithMouse);
        Item = await ItemParser.ParseItemAsync(ItemText.DecodeBase64Url() ?? string.Empty);

        if (Item.Metadata.Category != Category.Map && Item.Metadata.Category != Category.Contract && Item.Metadata.Category != Category.Logbook)
        {
            throw new InvalidItemException();
        }

        DangerousMods.Clear();
        OkMods.Clear();

        var dangerousRegex = await SettingsService.GetString(SettingKeys.MapCheckDangerousRegex);
        if (!string.IsNullOrEmpty(dangerousRegex))
        {
            var dangerousModsRegex = new Regex(dangerousRegex, RegexOptions.IgnoreCase);
            FilterMods(dangerousModsRegex, Item.ModifierLines);
        }
        else
        {
            FilterMods(null, Item.ModifierLines);
        }
    }

    private void FilterMods(
        Regex? modRegex,
        List<ModifierLine> modifierLines)
    {
        if (modRegex == null)
        {
            OkMods.AddRange(modifierLines.Select(x => x.Text));
            return;
        }

        foreach (var mod in modifierLines)
        {
            if (modRegex.IsMatch(mod.Text))
            {
                DangerousMods.Add(mod.Text);
            }
            else
            {
                OkMods.Add(mod.Text);
            }
        }
    }

}
