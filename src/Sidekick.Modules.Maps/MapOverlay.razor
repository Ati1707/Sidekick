@page "/map/{itemText}"
@using System.Text.RegularExpressions
@using Sidekick.Apis.Poe
@using Sidekick.Common.Settings
@using Sidekick.Common.Blazor.Components.Items
@using Sidekick.Common.Exceptions
@using Sidekick.Common.Game.Items
@using Sidekick.Modules.Maps.Localization

@using Sidekick.Common.Extensions
@inherits Sidekick.Common.Ui.Views.SidekickView

<AppTitle Title="@Resources["Map Check"]"/>

<LayoutTwoColumn>
    <TopContent>
        <AppBar>
            <AppClose/>
        </AppBar>
    </TopContent>
    <LeftContent>
        @if (Item == null)
        {
            <Heading2>@Resources["Parsing your item..."]</Heading2>
            <ProgressBar Indeterminate="true"/>
        }
        else
        {
            <ItemHeader Name="@Item.Header.Name"
                        Type="@Item.Header.Type"
                        Rarity="Item.Metadata.Rarity"
                        Influences="Item.Influences"/>

            @if (DangerousMods.Any())
            {
                <Heading1 Class="text-red-500 flex flex-nowrap items-center justify-center gap-2">
                    <IconLarge Icon="@UiIcons.ThumbDown"/>
                    @Resources["Unsafe"]
                </Heading1>
            }
            else
            {
                <Heading1 Class="text-green-500 flex flex-nowrap items-center justify-center gap-2">
                    <IconLarge Icon="@UiIcons.ThumbUp"/>
                    @Resources["Safe"]
                </Heading1>
            }

            <ItemSeparator Rarity="Item.Metadata.Rarity"/>

            @foreach (var mod in DangerousMods)
            {
                <div class="d-flex align-center px-4 py-1">
                    <IconLarge Icon="@UiIcons.ThumbDown"/>
                    <ItemModifierText Text="@mod"/>
                </div>
            }

            @if (DangerousMods.Any() && OkMods.Any())
            {
                <ItemSeparator Rarity="Item.Metadata.Rarity"/>
            }

            @foreach (var mod in OkMods)
            {
                <div class="d-flex align-center px-4 py-1">
                    <IconLarge Icon="@UiIcons.ThumbUp"/>
                    <ItemModifierText Text="@mod"/>
                </div>
            }
        }
    </LeftContent>
    <ChildContent>
        @if (Item != null)
        {
            <PoeWikiMapInfo Type="@Item.Invariant?.Type" Name="@Item.Invariant?.Name"/>
        }
    </ChildContent>
</LayoutTwoColumn>

@inject IStringLocalizer<MapInfoResources> Resources
@inject IItemParser ItemParser
@inject ISettingsService SettingsService

@code {

    [Parameter]
    public required string ItemText { get; set; }

    private List<string> DangerousMods { get; } =
    [
    ];

    private List<string> OkMods { get; } =
    [
    ];

    private Item? Item { get; set; }

    public override bool CloseOnBlur { get; set; }

    public override SidekickViewType ViewType => SidekickViewType.Overlay;

    public override int ViewWidth => 620;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrEmpty(ItemText))
        {
            return;
        }

        CloseOnBlur = await SettingsService.GetBool(SettingKeys.MapCheckCloseWithMouse);
        Item = await ItemParser.ParseItemAsync(ItemText.DecodeBase64Url() ?? string.Empty);

        if (Item.Metadata.Category != Category.Map && Item.Metadata.Category != Category.Contract && Item.Metadata.Category != Category.Logbook)
        {
            throw new InvalidItemException();
        }

        DangerousMods.Clear();
        OkMods.Clear();

        var dangerousRegex = await SettingsService.GetString(SettingKeys.MapCheckDangerousRegex);
        if (!string.IsNullOrEmpty(dangerousRegex))
        {
            var dangerousModsRegex = new Regex(dangerousRegex, RegexOptions.IgnoreCase);
            FilterMods(dangerousModsRegex, Item.ModifierLines);
        }
        else
        {
            FilterMods(null, Item.ModifierLines);
        }
    }

    private void FilterMods(
        Regex? modRegex,
        List<ModifierLine> modifierLines)
    {
        if (modRegex == null)
        {
            OkMods.AddRange(modifierLines.Select(x => x.Text));
            return;
        }

        foreach (var mod in modifierLines)
        {
            if (modRegex.IsMatch(mod.Text))
            {
                DangerousMods.Add(mod.Text);
            }
            else
            {
                OkMods.Add(mod.Text);
            }
        }
    }

}
