@using Sidekick.Apis.PoeWiki
@using Sidekick.Apis.PoeWiki.Models
@using Sidekick.Modules.Maps.Localization

@if (Loading)
{
    <AppLoading/>
}
else if (Map != null)
{
    <AppContainer>
        <div class="flex flex-col w-full items-stretch gap-2">
            @if (Map.Bosses?.Any() ?? false)
            {
                <div class="flex flex-wrap items-center justify-center gap-2">
                    @foreach (var boss in Map.Bosses.OrderBy(x => x.Name))
                    {
                        <BossFrame Name="@boss.Name"/>
                    }
                </div>
            }

            @if (Map.Drops?.Any() ?? false)
            {
                <div class="flex flex-wrap items-center justify-center gap-2">
                    @foreach (var drop in Map.Drops)
                    {
                        <DivinationCard Name="@drop.Name" Description="@drop.Description"/>
                    }
                </div>
            }
            else
            {
                <TextBase Class="text-center">@Resources["This map drops nothing."]</TextBase>
            }

            <div class="text-center mt-2">
                <ButtonLink OnClick="@(() => PoeWikiClient.OpenUri(Map))">
                    @Resources["Information provided by poewiki.net"]
                </ButtonLink>
            </div>
        </div>
    </AppContainer>
}
else
{
    <AppContainer>
        <AlertError>@Resources["Could not fetch information from the wiki."]</AlertError>
    </AppContainer>
}

@inject IStringLocalizer<MapInfoResources> Resources
@inject IPoeWikiClient PoeWikiClient

@code {

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public string? Type { get; set; }

    private bool Loading { get; set; } = true;

    private Map? Map { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Map = await PoeWikiClient.GetMap(Type ?? Name);
        Loading = false;
    }

}
